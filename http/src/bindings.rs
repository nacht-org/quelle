// Generated by `wit-bindgen` 0.24.0. DO NOT EDIT!
// Options used:
#[allow(dead_code)]
pub mod quelle {
    #[allow(dead_code)]
    pub mod http {
        #[allow(dead_code, clippy::all)]
        pub mod outgoing {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum Method {
                Get,
                Post,
                Put,
                Delete,
                Patch,
                Head,
                Options,
            }
            impl ::core::fmt::Debug for Method {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Method::Get => f.debug_tuple("Method::Get").finish(),
                        Method::Post => f.debug_tuple("Method::Post").finish(),
                        Method::Put => f.debug_tuple("Method::Put").finish(),
                        Method::Delete => f.debug_tuple("Method::Delete").finish(),
                        Method::Patch => f.debug_tuple("Method::Patch").finish(),
                        Method::Head => f.debug_tuple("Method::Head").finish(),
                        Method::Options => f.debug_tuple("Method::Options").finish(),
                    }
                }
            }

            impl Method {
                pub(crate) unsafe fn _lift(val: u8) -> Method {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => Method::Get,
                        1 => Method::Post,
                        2 => Method::Put,
                        3 => Method::Delete,
                        4 => Method::Patch,
                        5 => Method::Head,
                        6 => Method::Options,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            #[derive(Clone)]
            pub struct DataPart {
                pub data: _rt::Vec<u8>,
                pub name: Option<_rt::String>,
                pub content_type: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for DataPart {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("DataPart")
                        .field("data", &self.data)
                        .field("name", &self.name)
                        .field("content-type", &self.content_type)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum FormPart {
                Text(_rt::String),
                Data(DataPart),
            }
            impl ::core::fmt::Debug for FormPart {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        FormPart::Text(e) => f.debug_tuple("FormPart::Text").field(e).finish(),
                        FormPart::Data(e) => f.debug_tuple("FormPart::Data").field(e).finish(),
                    }
                }
            }
            #[derive(Clone)]
            pub enum RequestBody {
                Form(_rt::Vec<(_rt::String, FormPart)>),
            }
            impl ::core::fmt::Debug for RequestBody {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        RequestBody::Form(e) => {
                            f.debug_tuple("RequestBody::Form").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct Request {
                pub method: Method,
                pub url: _rt::String,
                pub params: Option<_rt::Vec<u8>>,
                pub data: Option<RequestBody>,
                pub headers: Option<_rt::Vec<u8>>,
            }
            impl ::core::fmt::Debug for Request {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Request")
                        .field("method", &self.method)
                        .field("url", &self.url)
                        .field("params", &self.params)
                        .field("data", &self.data)
                        .field("headers", &self.headers)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct Response {
                pub status: u16,
                pub data: Option<_rt::Vec<u8>>,
                pub headers: Option<_rt::Vec<(_rt::String, _rt::String)>>,
            }
            impl ::core::fmt::Debug for Response {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Response")
                        .field("status", &self.status)
                        .field("data", &self.data)
                        .field("headers", &self.headers)
                        .finish()
                }
            }
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum ResponseErrorKind {
                BadResponse,
                ConnectionError,
                ConnectionTimeout,
                ReceiveTimeout,
                RequestCancelled,
                SendTimeout,
            }
            impl ::core::fmt::Debug for ResponseErrorKind {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        ResponseErrorKind::BadResponse => {
                            f.debug_tuple("ResponseErrorKind::BadResponse").finish()
                        }
                        ResponseErrorKind::ConnectionError => {
                            f.debug_tuple("ResponseErrorKind::ConnectionError").finish()
                        }
                        ResponseErrorKind::ConnectionTimeout => f
                            .debug_tuple("ResponseErrorKind::ConnectionTimeout")
                            .finish(),
                        ResponseErrorKind::ReceiveTimeout => {
                            f.debug_tuple("ResponseErrorKind::ReceiveTimeout").finish()
                        }
                        ResponseErrorKind::RequestCancelled => f
                            .debug_tuple("ResponseErrorKind::RequestCancelled")
                            .finish(),
                        ResponseErrorKind::SendTimeout => {
                            f.debug_tuple("ResponseErrorKind::SendTimeout").finish()
                        }
                    }
                }
            }

            impl ResponseErrorKind {
                pub(crate) unsafe fn _lift(val: u8) -> ResponseErrorKind {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => ResponseErrorKind::BadResponse,
                        1 => ResponseErrorKind::ConnectionError,
                        2 => ResponseErrorKind::ConnectionTimeout,
                        3 => ResponseErrorKind::ReceiveTimeout,
                        4 => ResponseErrorKind::RequestCancelled,
                        5 => ResponseErrorKind::SendTimeout,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            #[derive(Clone)]
            pub struct ResponseError {
                pub status: Option<u16>,
                pub kind: ResponseErrorKind,
                pub response: Option<Response>,
                pub message: _rt::String,
            }
            impl ::core::fmt::Debug for ResponseError {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("ResponseError")
                        .field("status", &self.status)
                        .field("kind", &self.kind)
                        .field("response", &self.response)
                        .field("message", &self.message)
                        .finish()
                }
            }
            impl ::core::fmt::Display for ResponseError {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }
            impl std::error::Error for ResponseError {}

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Client {
                handle: _rt::Resource<Client>,
            }

            impl Client {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Client {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "quelle:http/outgoing@0.1.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]client"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl Client {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new() -> Self {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "quelle:http/outgoing@0.1.0")]
                        extern "C" {
                            #[link_name = "[constructor]client"]
                            fn wit_import() -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import() -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import();
                        Client::from_handle(ret as u32)
                    }
                }
            }
            impl Client {
                #[allow(unused_unsafe, clippy::all)]
                pub fn request(&self, request: &Request) -> Result<Response, ResponseError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 52]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 52]);
                        let Request {
                            method: method0,
                            url: url0,
                            params: params0,
                            data: data0,
                            headers: headers0,
                        } = request;
                        let vec1 = url0;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let (result3_0, result3_1, result3_2) = match params0 {
                            Some(e) => {
                                let vec2 = e;
                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                let len2 = vec2.len();

                                (1i32, ptr2.cast_mut(), len2)
                            }
                            None => (0i32, ::core::ptr::null_mut(), 0usize),
                        };
                        let (result13_0, result13_1, result13_2, result13_3) = match data0 {
                            Some(e) => {
                                let (result12_0, result12_1, result12_2) = match e {
                                    RequestBody::Form(e) => {
                                        let vec11 = e;
                                        let len11 = vec11.len();
                                        let layout11 =
                                            _rt::alloc::Layout::from_size_align_unchecked(
                                                vec11.len() * 44,
                                                4,
                                            );
                                        let result11 = if layout11.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout11);
                                            }
                                            ptr
                                        } else {
                                            {
                                                ::core::ptr::null_mut()
                                            }
                                        };
                                        for (i, e) in vec11.into_iter().enumerate() {
                                            let base = result11.add(i * 44);
                                            {
                                                let (t4_0, t4_1) = e;
                                                let vec5 = t4_0;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base.add(4).cast::<usize>() = len5;
                                                *base.add(0).cast::<*mut u8>() = ptr5.cast_mut();
                                                match t4_1 {
                                                    FormPart::Text(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        let vec6 = e;
                                                        let ptr6 = vec6.as_ptr().cast::<u8>();
                                                        let len6 = vec6.len();
                                                        *base.add(16).cast::<usize>() = len6;
                                                        *base.add(12).cast::<*mut u8>() =
                                                            ptr6.cast_mut();
                                                    }
                                                    FormPart::Data(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        let DataPart {
                                                            data: data7,
                                                            name: name7,
                                                            content_type: content_type7,
                                                        } = e;
                                                        let vec8 = data7;
                                                        let ptr8 = vec8.as_ptr().cast::<u8>();
                                                        let len8 = vec8.len();
                                                        *base.add(16).cast::<usize>() = len8;
                                                        *base.add(12).cast::<*mut u8>() =
                                                            ptr8.cast_mut();
                                                        match name7 {
                                                            Some(e) => {
                                                                *base.add(20).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                let vec9 = e;
                                                                let ptr9 =
                                                                    vec9.as_ptr().cast::<u8>();
                                                                let len9 = vec9.len();
                                                                *base.add(28).cast::<usize>() =
                                                                    len9;
                                                                *base.add(24).cast::<*mut u8>() =
                                                                    ptr9.cast_mut();
                                                            }
                                                            None => {
                                                                *base.add(20).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                        match content_type7 {
                                                            Some(e) => {
                                                                *base.add(32).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                let vec10 = e;
                                                                let ptr10 =
                                                                    vec10.as_ptr().cast::<u8>();
                                                                let len10 = vec10.len();
                                                                *base.add(40).cast::<usize>() =
                                                                    len10;
                                                                *base.add(36).cast::<*mut u8>() =
                                                                    ptr10.cast_mut();
                                                            }
                                                            None => {
                                                                *base.add(32).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                }
                                            }
                                        }
                                        cleanup_list.extend_from_slice(&[(result11, layout11)]);

                                        (0i32, result11, len11)
                                    }
                                };

                                (1i32, result12_0, result12_1, result12_2)
                            }
                            None => (0i32, 0i32, ::core::ptr::null_mut(), 0usize),
                        };
                        let (result15_0, result15_1, result15_2) = match headers0 {
                            Some(e) => {
                                let vec14 = e;
                                let ptr14 = vec14.as_ptr().cast::<u8>();
                                let len14 = vec14.len();

                                (1i32, ptr14.cast_mut(), len14)
                            }
                            None => (0i32, ::core::ptr::null_mut(), 0usize),
                        };
                        let ptr16 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "quelle:http/outgoing@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]client.request"]
                            fn wit_import(
                                _: i32,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            method0.clone() as i32,
                            ptr1.cast_mut(),
                            len1,
                            result3_0,
                            result3_1,
                            result3_2,
                            result13_0,
                            result13_1,
                            result13_2,
                            result13_3,
                            result15_0,
                            result15_1,
                            result15_2,
                            ptr16,
                        );
                        let l17 = i32::from(*ptr16.add(0).cast::<u8>());
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l17 {
                            0 => {
                                let e = {
                                    let l18 = i32::from(*ptr16.add(4).cast::<u16>());
                                    let l19 = i32::from(*ptr16.add(8).cast::<u8>());
                                    let l23 = i32::from(*ptr16.add(20).cast::<u8>());

                                    Response {
                                        status: l18 as u16,
                                        data: match l19 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l20 = *ptr16.add(12).cast::<*mut u8>();
                                                    let l21 = *ptr16.add(16).cast::<usize>();
                                                    let len22 = l21;

                                                    _rt::Vec::from_raw_parts(
                                                        l20.cast(),
                                                        len22,
                                                        len22,
                                                    )
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        headers: match l23 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l24 = *ptr16.add(24).cast::<*mut u8>();
                                                    let l25 = *ptr16.add(28).cast::<usize>();
                                                    let base32 = l24;
                                                    let len32 = l25;
                                                    let mut result32 =
                                                        _rt::Vec::with_capacity(len32);
                                                    for i in 0..len32 {
                                                        let base = base32.add(i * 16);
                                                        let e32 = {
                                                            let l26 =
                                                                *base.add(0).cast::<*mut u8>();
                                                            let l27 = *base.add(4).cast::<usize>();
                                                            let len28 = l27;
                                                            let bytes28 = _rt::Vec::from_raw_parts(
                                                                l26.cast(),
                                                                len28,
                                                                len28,
                                                            );
                                                            let l29 =
                                                                *base.add(8).cast::<*mut u8>();
                                                            let l30 = *base.add(12).cast::<usize>();
                                                            let len31 = l30;
                                                            let bytes31 = _rt::Vec::from_raw_parts(
                                                                l29.cast(),
                                                                len31,
                                                                len31,
                                                            );

                                                            (
                                                                _rt::string_lift(bytes28),
                                                                _rt::string_lift(bytes31),
                                                            )
                                                        };
                                                        result32.push(e32);
                                                    }
                                                    _rt::cabi_dealloc(base32, len32 * 16, 4);

                                                    result32
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                    }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l33 = i32::from(*ptr16.add(4).cast::<u8>());
                                    let l35 = i32::from(*ptr16.add(8).cast::<u8>());
                                    let l36 = i32::from(*ptr16.add(12).cast::<u8>());
                                    let l52 = *ptr16.add(44).cast::<*mut u8>();
                                    let l53 = *ptr16.add(48).cast::<usize>();
                                    let len54 = l53;
                                    let bytes54 =
                                        _rt::Vec::from_raw_parts(l52.cast(), len54, len54);

                                    ResponseError {
                                        status: match l33 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l34 =
                                                        i32::from(*ptr16.add(6).cast::<u16>());

                                                    l34 as u16
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        kind: ResponseErrorKind::_lift(l35 as u8),
                                        response: match l36 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l37 =
                                                        i32::from(*ptr16.add(16).cast::<u16>());
                                                    let l38 =
                                                        i32::from(*ptr16.add(20).cast::<u8>());
                                                    let l42 =
                                                        i32::from(*ptr16.add(32).cast::<u8>());

                                                    Response {
                                                        status: l37 as u16,
                                                        data: match l38 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l39 = *ptr16
                                                                        .add(24)
                                                                        .cast::<*mut u8>();
                                                                    let l40 = *ptr16
                                                                        .add(28)
                                                                        .cast::<usize>();
                                                                    let len41 = l40;

                                                                    _rt::Vec::from_raw_parts(
                                                                        l39.cast(),
                                                                        len41,
                                                                        len41,
                                                                    )
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        headers: match l42 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l43 = *ptr16
                                                                        .add(36)
                                                                        .cast::<*mut u8>();
                                                                    let l44 = *ptr16
                                                                        .add(40)
                                                                        .cast::<usize>();
                                                                    let base51 = l43;
                                                                    let len51 = l44;
                                                                    let mut result51 =
                                                                        _rt::Vec::with_capacity(
                                                                            len51,
                                                                        );
                                                                    for i in 0..len51 {
                                                                        let base =
                                                                            base51.add(i * 16);
                                                                        let e51 = {
                                                                            let l45 = *base
                                                                                .add(0)
                                                                                .cast::<*mut u8>(
                                                                            );
                                                                            let l46 = *base
                                                                                .add(4)
                                                                                .cast::<usize>(
                                                                            );
                                                                            let len47 = l46;
                                                                            let bytes47 = _rt::Vec::from_raw_parts(l45.cast(), len47, len47);
                                                                            let l48 = *base
                                                                                .add(8)
                                                                                .cast::<*mut u8>(
                                                                            );
                                                                            let l49 = *base
                                                                                .add(12)
                                                                                .cast::<usize>();
                                                                            let len50 = l49;
                                                                            let bytes50 = _rt::Vec::from_raw_parts(l48.cast(), len50, len50);

                                                                            (
                                                                                _rt::string_lift(
                                                                                    bytes47,
                                                                                ),
                                                                                _rt::string_lift(
                                                                                    bytes50,
                                                                                ),
                                                                            )
                                                                        };
                                                                        result51.push(e51);
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base51,
                                                                        len51 * 16,
                                                                        4,
                                                                    );

                                                                    result51
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        message: _rt::string_lift(bytes54),
                                    }
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
        }
    }
}
mod _rt {
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;

    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};

    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        // NB: This would ideally be `u32` but it is not. The fact that this has
        // interior mutability is not exposed in the API of this type except for the
        // `take_handle` method which is supposed to in theory be private.
        //
        // This represents, almost all the time, a valid handle value. When it's
        // invalid it's stored as `u32::MAX`.
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }

    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }

    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }

        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }

        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }

    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource")
                .field("handle", &self.handle)
                .finish()
        }
    }

    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    // If this handle was "taken" then don't do anything in the
                    // destructor.
                    u32::MAX => {}

                    // ... but otherwise do actually destroy it with the imported
                    // component model intrinsic as defined through `T`.
                    other => T::drop(other),
                }
            }
        }
    }
    pub use alloc_crate::alloc;
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            core::hint::unreachable_unchecked()
        }
    }
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }
    extern crate alloc as alloc_crate;
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.24.0:http:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 759] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xfc\x04\x01A\x02\x01\
A\x02\x01B#\x01m\x07\x03get\x04post\x03put\x06delete\x05patch\x04head\x07options\
\x04\0\x06method\x03\0\0\x01p}\x01ks\x01r\x03\x04data\x02\x04name\x03\x0ccontent\
-type\x03\x04\0\x09data-part\x03\0\x04\x01q\x02\x04text\x01s\0\x04data\x01\x05\0\
\x04\0\x09form-part\x03\0\x06\x01o\x02s\x07\x01p\x08\x01q\x01\x04form\x01\x09\0\x04\
\0\x0crequest-body\x03\0\x0a\x01k\x02\x01k\x0b\x01r\x05\x06method\x01\x03urls\x06\
params\x0c\x04data\x0d\x07headers\x0c\x04\0\x07request\x03\0\x0e\x01o\x02ss\x01p\
\x10\x01k\x11\x01r\x03\x06status{\x04data\x0c\x07headers\x12\x04\0\x08response\x03\
\0\x13\x01m\x06\x0cbad-response\x10connection-error\x12connection-timeout\x0frec\
eive-timeout\x11request-cancelled\x0csend-timeout\x04\0\x13response-error-kind\x03\
\0\x15\x01k{\x01k\x14\x01r\x04\x06status\x17\x04kind\x16\x08response\x18\x07mess\
ages\x04\0\x0eresponse-error\x03\0\x19\x04\0\x06client\x03\x01\x01i\x1b\x01@\0\0\
\x1c\x04\0\x13[constructor]client\x01\x1d\x01h\x1b\x01j\x01\x14\x01\x1a\x01@\x02\
\x04self\x1e\x07request\x0f\0\x1f\x04\0\x16[method]client.request\x01\x20\x03\x01\
\x1aquelle:http/outgoing@0.1.0\x05\0\x04\x01\x16quelle:http/http@0.1.0\x04\0\x0b\
\x0a\x01\0\x04http\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-compon\
ent\x070.202.0\x10wit-bindgen-rust\x060.24.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
