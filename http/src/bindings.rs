// Generated by `wit-bindgen` 0.24.0. DO NOT EDIT!
// Options used:
#[allow(dead_code)]
pub mod exports {
    #[allow(dead_code)]
    pub mod quelle {
        #[allow(dead_code)]
        pub mod http {
            #[allow(dead_code, clippy::all)]
            pub mod main {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[repr(u8)]
                #[derive(Clone, Copy, Eq, PartialEq)]
                pub enum Method {
                    Get,
                    Post,
                    Put,
                    Delete,
                    Patch,
                    Head,
                    Options,
                }
                impl ::core::fmt::Debug for Method {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            Method::Get => f.debug_tuple("Method::Get").finish(),
                            Method::Post => f.debug_tuple("Method::Post").finish(),
                            Method::Put => f.debug_tuple("Method::Put").finish(),
                            Method::Delete => f.debug_tuple("Method::Delete").finish(),
                            Method::Patch => f.debug_tuple("Method::Patch").finish(),
                            Method::Head => f.debug_tuple("Method::Head").finish(),
                            Method::Options => f.debug_tuple("Method::Options").finish(),
                        }
                    }
                }

                impl Method {
                    pub(crate) unsafe fn _lift(val: u8) -> Method {
                        if !cfg!(debug_assertions) {
                            return ::core::mem::transmute(val);
                        }

                        match val {
                            0 => Method::Get,
                            1 => Method::Post,
                            2 => Method::Put,
                            3 => Method::Delete,
                            4 => Method::Patch,
                            5 => Method::Head,
                            6 => Method::Options,

                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                }

                #[derive(Clone)]
                pub struct DataPart {
                    pub data: _rt::Vec<u8>,
                    pub name: Option<_rt::String>,
                    pub content_type: Option<_rt::String>,
                }
                impl ::core::fmt::Debug for DataPart {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("DataPart")
                            .field("data", &self.data)
                            .field("name", &self.name)
                            .field("content-type", &self.content_type)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub enum FormPart {
                    Text(_rt::String),
                    Data(DataPart),
                }
                impl ::core::fmt::Debug for FormPart {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            FormPart::Text(e) => f.debug_tuple("FormPart::Text").field(e).finish(),
                            FormPart::Data(e) => f.debug_tuple("FormPart::Data").field(e).finish(),
                        }
                    }
                }
                #[derive(Clone)]
                pub enum RequestBody {
                    Form(_rt::Vec<(_rt::String, FormPart)>),
                }
                impl ::core::fmt::Debug for RequestBody {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            RequestBody::Form(e) => {
                                f.debug_tuple("RequestBody::Form").field(e).finish()
                            }
                        }
                    }
                }
                #[derive(Clone)]
                pub struct Request {
                    pub method: Method,
                    pub url: _rt::String,
                    pub params: Option<_rt::Vec<u8>>,
                    pub data: Option<RequestBody>,
                    pub headers: Option<_rt::Vec<u8>>,
                }
                impl ::core::fmt::Debug for Request {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("Request")
                            .field("method", &self.method)
                            .field("url", &self.url)
                            .field("params", &self.params)
                            .field("data", &self.data)
                            .field("headers", &self.headers)
                            .finish()
                    }
                }
                #[derive(Clone)]
                pub struct Response {
                    pub status: u16,
                    pub data: Option<_rt::Vec<u8>>,
                    pub headers: Option<_rt::Vec<(_rt::String, _rt::String)>>,
                }
                impl ::core::fmt::Debug for Response {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("Response")
                            .field("status", &self.status)
                            .field("data", &self.data)
                            .field("headers", &self.headers)
                            .finish()
                    }
                }
                #[repr(u8)]
                #[derive(Clone, Copy, Eq, PartialEq)]
                pub enum ResponseErrorKind {
                    BadResponse,
                    ConnectionError,
                    ConnectionTimeout,
                    ReceiveTimeout,
                    RequestCancelled,
                    SendTimeout,
                }
                impl ::core::fmt::Debug for ResponseErrorKind {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            ResponseErrorKind::BadResponse => {
                                f.debug_tuple("ResponseErrorKind::BadResponse").finish()
                            }
                            ResponseErrorKind::ConnectionError => {
                                f.debug_tuple("ResponseErrorKind::ConnectionError").finish()
                            }
                            ResponseErrorKind::ConnectionTimeout => f
                                .debug_tuple("ResponseErrorKind::ConnectionTimeout")
                                .finish(),
                            ResponseErrorKind::ReceiveTimeout => {
                                f.debug_tuple("ResponseErrorKind::ReceiveTimeout").finish()
                            }
                            ResponseErrorKind::RequestCancelled => f
                                .debug_tuple("ResponseErrorKind::RequestCancelled")
                                .finish(),
                            ResponseErrorKind::SendTimeout => {
                                f.debug_tuple("ResponseErrorKind::SendTimeout").finish()
                            }
                        }
                    }
                }

                impl ResponseErrorKind {
                    pub(crate) unsafe fn _lift(val: u8) -> ResponseErrorKind {
                        if !cfg!(debug_assertions) {
                            return ::core::mem::transmute(val);
                        }

                        match val {
                            0 => ResponseErrorKind::BadResponse,
                            1 => ResponseErrorKind::ConnectionError,
                            2 => ResponseErrorKind::ConnectionTimeout,
                            3 => ResponseErrorKind::ReceiveTimeout,
                            4 => ResponseErrorKind::RequestCancelled,
                            5 => ResponseErrorKind::SendTimeout,

                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                }

                #[derive(Clone)]
                pub struct ResponseError {
                    pub status: Option<u16>,
                    pub kind: ResponseErrorKind,
                    pub response: Option<Response>,
                    pub message: _rt::String,
                }
                impl ::core::fmt::Debug for ResponseError {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("ResponseError")
                            .field("status", &self.status)
                            .field("kind", &self.kind)
                            .field("response", &self.response)
                            .field("message", &self.message)
                            .finish()
                    }
                }
                impl ::core::fmt::Display for ResponseError {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        write!(f, "{:?}", self)
                    }
                }
                impl std::error::Error for ResponseError {}

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Client {
                    handle: _rt::Resource<Client>,
                }

                type _ClientRep<T> = Option<T>;

                impl Client {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `Client`.
                    pub fn new<T: GuestClient>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _ClientRep<T> = Some(val);
                        let ptr: *mut _ClientRep<T> = _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestClient>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestClient>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestClient>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: _rt::Resource::from_handle(handle),
                        }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestClient` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(
                                    ty == id,
                                    "cannot use two types with this resource type"
                                ),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(handle as *mut _ClientRep<T>);
                    }

                    fn as_ptr<T: GuestClient>(&self) -> *mut _ClientRep<T> {
                        Client::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }

                /// A borrowed version of [`Client`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct ClientBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Client>,
                }

                impl<'a> ClientBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestClient>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(&self) -> *mut _ClientRep<T> {
                        Client::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for Client {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]quelle:http/main@0.1.0")]
                            extern "C" {
                                #[link_name = "[resource-drop]client"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_client_request_cabi<T: GuestClient>(
                    arg0: *mut u8,
                    arg1: i32,
                    arg2: *mut u8,
                    arg3: usize,
                    arg4: i32,
                    arg5: *mut u8,
                    arg6: usize,
                    arg7: i32,
                    arg8: i32,
                    arg9: *mut u8,
                    arg10: usize,
                    arg11: i32,
                    arg12: *mut u8,
                    arg13: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg3;
                    let bytes0 = _rt::Vec::from_raw_parts(arg2.cast(), len0, len0);
                    let result24 = T::request(
                        ClientBorrow::lift(arg0 as u32 as usize).get(),
                        Request {
                            method: Method::_lift(arg1 as u8),
                            url: _rt::string_lift(bytes0),
                            params: match arg4 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let len1 = arg6;

                                        _rt::Vec::from_raw_parts(arg5.cast(), len1, len1)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            data: match arg7 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let v22 = match arg8 {
                                            n => {
                                                debug_assert_eq!(n, 0, "invalid enum discriminant");
                                                let e22 = {
                                                    let base21 = arg9;
                                                    let len21 = arg10;
                                                    let mut result21 =
                                                        _rt::Vec::with_capacity(len21);
                                                    for i in 0..len21 {
                                                        let base = base21.add(i * 44);
                                                        let e21 = {
                                                            let l2 = *base.add(0).cast::<*mut u8>();
                                                            let l3 = *base.add(4).cast::<usize>();
                                                            let len4 = l3;
                                                            let bytes4 = _rt::Vec::from_raw_parts(
                                                                l2.cast(),
                                                                len4,
                                                                len4,
                                                            );
                                                            let l5 = i32::from(
                                                                *base.add(8).cast::<u8>(),
                                                            );
                                                            let v20 = match l5 {
                                                                0 => {
                                                                    let e20 = {
                                                                        let l6 = *base
                                                                            .add(12)
                                                                            .cast::<*mut u8>(
                                                                        );
                                                                        let l7 = *base
                                                                            .add(16)
                                                                            .cast::<usize>();
                                                                        let len8 = l7;
                                                                        let bytes8 = _rt::Vec::from_raw_parts(l6.cast(), len8, len8);

                                                                        _rt::string_lift(bytes8)
                                                                    };
                                                                    FormPart::Text(e20)
                                                                }
                                                                n => {
                                                                    debug_assert_eq!(
                                                                        n, 1,
                                                                        "invalid enum discriminant"
                                                                    );
                                                                    let e20 = {
                                                                        let l9 = *base
                                                                            .add(12)
                                                                            .cast::<*mut u8>(
                                                                        );
                                                                        let l10 = *base
                                                                            .add(16)
                                                                            .cast::<usize>();
                                                                        let len11 = l10;
                                                                        let l12 = i32::from(
                                                                            *base
                                                                                .add(20)
                                                                                .cast::<u8>(),
                                                                        );
                                                                        let l16 = i32::from(
                                                                            *base
                                                                                .add(32)
                                                                                .cast::<u8>(),
                                                                        );

                                                                        DataPart{
                                  data: _rt::Vec::from_raw_parts(l9.cast(), len11, len11),
                                  name: match l12 {
                                    0 => None,
                                    1 => {
                                      let e = {
                                        let l13 = *base.add(24).cast::<*mut u8>();
                                        let l14 = *base.add(28).cast::<usize>();
                                        let len15 = l14;
                                        let bytes15 = _rt::Vec::from_raw_parts(l13.cast(), len15, len15);

                                        _rt::string_lift(bytes15)
                                      };
                                      Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                  },
                                  content_type: match l16 {
                                    0 => None,
                                    1 => {
                                      let e = {
                                        let l17 = *base.add(36).cast::<*mut u8>();
                                        let l18 = *base.add(40).cast::<usize>();
                                        let len19 = l18;
                                        let bytes19 = _rt::Vec::from_raw_parts(l17.cast(), len19, len19);

                                        _rt::string_lift(bytes19)
                                      };
                                      Some(e)
                                    }
                                    _ => _rt::invalid_enum_discriminant(),
                                  },
                                }
                                                                    };
                                                                    FormPart::Data(e20)
                                                                }
                                                            };

                                                            (_rt::string_lift(bytes4), v20)
                                                        };
                                                        result21.push(e21);
                                                    }
                                                    _rt::cabi_dealloc(base21, len21 * 44, 4);

                                                    result21
                                                };
                                                RequestBody::Form(e22)
                                            }
                                        };

                                        v22
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                            headers: match arg11 {
                                0 => None,
                                1 => {
                                    let e = {
                                        let len23 = arg13;

                                        _rt::Vec::from_raw_parts(arg12.cast(), len23, len23)
                                    };
                                    Some(e)
                                }
                                _ => _rt::invalid_enum_discriminant(),
                            },
                        },
                    );
                    let ptr25 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result24 {
                        Ok(e) => {
                            *ptr25.add(0).cast::<u8>() = (0i32) as u8;
                            let Response {
                                status: status26,
                                data: data26,
                                headers: headers26,
                            } = e;
                            *ptr25.add(4).cast::<u16>() = (_rt::as_i32(status26)) as u16;
                            match data26 {
                                Some(e) => {
                                    *ptr25.add(8).cast::<u8>() = (1i32) as u8;
                                    let vec27 = (e).into_boxed_slice();
                                    let ptr27 = vec27.as_ptr().cast::<u8>();
                                    let len27 = vec27.len();
                                    ::core::mem::forget(vec27);
                                    *ptr25.add(16).cast::<usize>() = len27;
                                    *ptr25.add(12).cast::<*mut u8>() = ptr27.cast_mut();
                                }
                                None => {
                                    *ptr25.add(8).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            match headers26 {
                                Some(e) => {
                                    *ptr25.add(20).cast::<u8>() = (1i32) as u8;
                                    let vec31 = e;
                                    let len31 = vec31.len();
                                    let layout31 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec31.len() * 16,
                                        4,
                                    );
                                    let result31 = if layout31.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout31).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout31);
                                        }
                                        ptr
                                    } else {
                                        {
                                            ::core::ptr::null_mut()
                                        }
                                    };
                                    for (i, e) in vec31.into_iter().enumerate() {
                                        let base = result31.add(i * 16);
                                        {
                                            let (t28_0, t28_1) = e;
                                            let vec29 = (t28_0.into_bytes()).into_boxed_slice();
                                            let ptr29 = vec29.as_ptr().cast::<u8>();
                                            let len29 = vec29.len();
                                            ::core::mem::forget(vec29);
                                            *base.add(4).cast::<usize>() = len29;
                                            *base.add(0).cast::<*mut u8>() = ptr29.cast_mut();
                                            let vec30 = (t28_1.into_bytes()).into_boxed_slice();
                                            let ptr30 = vec30.as_ptr().cast::<u8>();
                                            let len30 = vec30.len();
                                            ::core::mem::forget(vec30);
                                            *base.add(12).cast::<usize>() = len30;
                                            *base.add(8).cast::<*mut u8>() = ptr30.cast_mut();
                                        }
                                    }
                                    *ptr25.add(28).cast::<usize>() = len31;
                                    *ptr25.add(24).cast::<*mut u8>() = result31;
                                }
                                None => {
                                    *ptr25.add(20).cast::<u8>() = (0i32) as u8;
                                }
                            };
                        }
                        Err(e) => {
                            *ptr25.add(0).cast::<u8>() = (1i32) as u8;
                            let ResponseError {
                                status: status32,
                                kind: kind32,
                                response: response32,
                                message: message32,
                            } = e;
                            match status32 {
                                Some(e) => {
                                    *ptr25.add(4).cast::<u8>() = (1i32) as u8;
                                    *ptr25.add(6).cast::<u16>() = (_rt::as_i32(e)) as u16;
                                }
                                None => {
                                    *ptr25.add(4).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            *ptr25.add(8).cast::<u8>() = (kind32.clone() as i32) as u8;
                            match response32 {
                                Some(e) => {
                                    *ptr25.add(12).cast::<u8>() = (1i32) as u8;
                                    let Response {
                                        status: status33,
                                        data: data33,
                                        headers: headers33,
                                    } = e;
                                    *ptr25.add(16).cast::<u16>() = (_rt::as_i32(status33)) as u16;
                                    match data33 {
                                        Some(e) => {
                                            *ptr25.add(20).cast::<u8>() = (1i32) as u8;
                                            let vec34 = (e).into_boxed_slice();
                                            let ptr34 = vec34.as_ptr().cast::<u8>();
                                            let len34 = vec34.len();
                                            ::core::mem::forget(vec34);
                                            *ptr25.add(28).cast::<usize>() = len34;
                                            *ptr25.add(24).cast::<*mut u8>() = ptr34.cast_mut();
                                        }
                                        None => {
                                            *ptr25.add(20).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                    match headers33 {
                                        Some(e) => {
                                            *ptr25.add(32).cast::<u8>() = (1i32) as u8;
                                            let vec38 = e;
                                            let len38 = vec38.len();
                                            let layout38 =
                                                _rt::alloc::Layout::from_size_align_unchecked(
                                                    vec38.len() * 16,
                                                    4,
                                                );
                                            let result38 = if layout38.size() != 0 {
                                                let ptr = _rt::alloc::alloc(layout38).cast::<u8>();
                                                if ptr.is_null() {
                                                    _rt::alloc::handle_alloc_error(layout38);
                                                }
                                                ptr
                                            } else {
                                                {
                                                    ::core::ptr::null_mut()
                                                }
                                            };
                                            for (i, e) in vec38.into_iter().enumerate() {
                                                let base = result38.add(i * 16);
                                                {
                                                    let (t35_0, t35_1) = e;
                                                    let vec36 =
                                                        (t35_0.into_bytes()).into_boxed_slice();
                                                    let ptr36 = vec36.as_ptr().cast::<u8>();
                                                    let len36 = vec36.len();
                                                    ::core::mem::forget(vec36);
                                                    *base.add(4).cast::<usize>() = len36;
                                                    *base.add(0).cast::<*mut u8>() =
                                                        ptr36.cast_mut();
                                                    let vec37 =
                                                        (t35_1.into_bytes()).into_boxed_slice();
                                                    let ptr37 = vec37.as_ptr().cast::<u8>();
                                                    let len37 = vec37.len();
                                                    ::core::mem::forget(vec37);
                                                    *base.add(12).cast::<usize>() = len37;
                                                    *base.add(8).cast::<*mut u8>() =
                                                        ptr37.cast_mut();
                                                }
                                            }
                                            *ptr25.add(40).cast::<usize>() = len38;
                                            *ptr25.add(36).cast::<*mut u8>() = result38;
                                        }
                                        None => {
                                            *ptr25.add(32).cast::<u8>() = (0i32) as u8;
                                        }
                                    };
                                }
                                None => {
                                    *ptr25.add(12).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            let vec39 = (message32.into_bytes()).into_boxed_slice();
                            let ptr39 = vec39.as_ptr().cast::<u8>();
                            let len39 = vec39.len();
                            ::core::mem::forget(vec39);
                            *ptr25.add(48).cast::<usize>() = len39;
                            *ptr25.add(44).cast::<*mut u8>() = ptr39.cast_mut();
                        }
                    };
                    ptr25
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_client_request<T: GuestClient>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = i32::from(*arg0.add(8).cast::<u8>());
                            match l1 {
                                0 => (),
                                _ => {
                                    let l2 = *arg0.add(12).cast::<*mut u8>();
                                    let l3 = *arg0.add(16).cast::<usize>();
                                    let base4 = l2;
                                    let len4 = l3;
                                    _rt::cabi_dealloc(base4, len4 * 1, 1);
                                }
                            }
                            let l5 = i32::from(*arg0.add(20).cast::<u8>());
                            match l5 {
                                0 => (),
                                _ => {
                                    let l10 = *arg0.add(24).cast::<*mut u8>();
                                    let l11 = *arg0.add(28).cast::<usize>();
                                    let base12 = l10;
                                    let len12 = l11;
                                    for i in 0..len12 {
                                        let base = base12.add(i * 16);
                                        {
                                            let l6 = *base.add(0).cast::<*mut u8>();
                                            let l7 = *base.add(4).cast::<usize>();
                                            _rt::cabi_dealloc(l6, l7, 1);
                                            let l8 = *base.add(8).cast::<*mut u8>();
                                            let l9 = *base.add(12).cast::<usize>();
                                            _rt::cabi_dealloc(l8, l9, 1);
                                        }
                                    }
                                    _rt::cabi_dealloc(base12, len12 * 16, 4);
                                }
                            }
                        }
                        _ => {
                            let l13 = i32::from(*arg0.add(12).cast::<u8>());
                            match l13 {
                                0 => (),
                                _ => {
                                    let l14 = i32::from(*arg0.add(20).cast::<u8>());
                                    match l14 {
                                        0 => (),
                                        _ => {
                                            let l15 = *arg0.add(24).cast::<*mut u8>();
                                            let l16 = *arg0.add(28).cast::<usize>();
                                            let base17 = l15;
                                            let len17 = l16;
                                            _rt::cabi_dealloc(base17, len17 * 1, 1);
                                        }
                                    }
                                    let l18 = i32::from(*arg0.add(32).cast::<u8>());
                                    match l18 {
                                        0 => (),
                                        _ => {
                                            let l23 = *arg0.add(36).cast::<*mut u8>();
                                            let l24 = *arg0.add(40).cast::<usize>();
                                            let base25 = l23;
                                            let len25 = l24;
                                            for i in 0..len25 {
                                                let base = base25.add(i * 16);
                                                {
                                                    let l19 = *base.add(0).cast::<*mut u8>();
                                                    let l20 = *base.add(4).cast::<usize>();
                                                    _rt::cabi_dealloc(l19, l20, 1);
                                                    let l21 = *base.add(8).cast::<*mut u8>();
                                                    let l22 = *base.add(12).cast::<usize>();
                                                    _rt::cabi_dealloc(l21, l22, 1);
                                                }
                                            }
                                            _rt::cabi_dealloc(base25, len25 * 16, 4);
                                        }
                                    }
                                }
                            }
                            let l26 = *arg0.add(44).cast::<*mut u8>();
                            let l27 = *arg0.add(48).cast::<usize>();
                            _rt::cabi_dealloc(l26, l27, 1);
                        }
                    }
                }
                pub trait Guest {
                    type Client: GuestClient;
                }
                pub trait GuestClient: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]quelle:http/main@0.1.0")]
                            extern "C" {
                                #[link_name = "[resource-new]client"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]quelle:http/main@0.1.0")]
                            extern "C" {
                                #[link_name = "[resource-rep]client"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }

                    fn request(&self, request: Request) -> Result<Response, ResponseError>;
                }
                #[doc(hidden)]

                macro_rules! __export_quelle_http_main_0_1_0_cabi{
            ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

              #[export_name = "quelle:http/main@0.1.0#[method]client.request"]
              unsafe extern "C" fn export_method_client_request(arg0: *mut u8,arg1: i32,arg2: *mut u8,arg3: usize,arg4: i32,arg5: *mut u8,arg6: usize,arg7: i32,arg8: i32,arg9: *mut u8,arg10: usize,arg11: i32,arg12: *mut u8,arg13: usize,) -> *mut u8 {
                $($path_to_types)*::_export_method_client_request_cabi::<<$ty as $($path_to_types)*::Guest>::Client>(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13)
              }
              #[export_name = "cabi_post_quelle:http/main@0.1.0#[method]client.request"]
              unsafe extern "C" fn _post_return_method_client_request(arg0: *mut u8,) {
                $($path_to_types)*::__post_return_method_client_request::<<$ty as $($path_to_types)*::Guest>::Client>(arg0)
              }

              const _: () = {
                #[doc(hidden)]
                #[export_name = "quelle:http/main@0.1.0#[dtor]client"]
                #[allow(non_snake_case)]
                unsafe extern "C" fn dtor(rep: *mut u8) {
                  $($path_to_types)*::Client::dtor::<
                  <$ty as $($path_to_types)*::Guest>::Client
                  >(rep)
                }
              };

            };);
          }
                #[doc(hidden)]
                pub(crate) use __export_quelle_http_main_0_1_0_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 52]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 52]);
            }
        }
    }
}
mod _rt {
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;

    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};

    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        // NB: This would ideally be `u32` but it is not. The fact that this has
        // interior mutability is not exposed in the API of this type except for the
        // `take_handle` method which is supposed to in theory be private.
        //
        // This represents, almost all the time, a valid handle value. When it's
        // invalid it's stored as `u32::MAX`.
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }

    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }

    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }

        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }

        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }

    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource")
                .field("handle", &self.handle)
                .finish()
        }
    }

    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    // If this handle was "taken" then don't do anything in the
                    // destructor.
                    u32::MAX => {}

                    // ... but otherwise do actually destroy it with the imported
                    // component model intrinsic as defined through `T`.
                    other => T::drop(other),
                }
            }
        }
    }
    pub use alloc_crate::boxed::Box;

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            core::hint::unreachable_unchecked()
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }

    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }

    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }

    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }

    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub use alloc_crate::alloc;
    extern crate alloc as alloc_crate;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_http_impl {
    ($ty:ident) => (self::export!($ty with_types_in self););
    ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
    $($path_to_types_root)*::exports::quelle::http::main::__export_quelle_http_main_0_1_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::quelle::http::main);
    )
  }
#[doc(inline)]
pub(crate) use __export_http_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.24.0:http:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 723] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xd8\x04\x01A\x02\x01\
A\x02\x01B\x20\x01m\x07\x03get\x04post\x03put\x06delete\x05patch\x04head\x07opti\
ons\x04\0\x06method\x03\0\0\x01p}\x01ks\x01r\x03\x04data\x02\x04name\x03\x0ccont\
ent-type\x03\x04\0\x09data-part\x03\0\x04\x01q\x02\x04text\x01s\0\x04data\x01\x05\
\0\x04\0\x09form-part\x03\0\x06\x01o\x02s\x07\x01p\x08\x01q\x01\x04form\x01\x09\0\
\x04\0\x0crequest-body\x03\0\x0a\x01k\x02\x01k\x0b\x01r\x05\x06method\x01\x03url\
s\x06params\x0c\x04data\x0d\x07headers\x0c\x04\0\x07request\x03\0\x0e\x01o\x02ss\
\x01p\x10\x01k\x11\x01r\x03\x06status{\x04data\x0c\x07headers\x12\x04\0\x08respo\
nse\x03\0\x13\x01m\x06\x0cbad-response\x10connection-error\x12connection-timeout\
\x0freceive-timeout\x11request-cancelled\x0csend-timeout\x04\0\x13response-error\
-kind\x03\0\x15\x01k{\x01k\x14\x01r\x04\x06status\x17\x04kind\x16\x08response\x18\
\x07messages\x04\0\x0eresponse-error\x03\0\x19\x04\0\x06client\x03\x01\x01h\x1b\x01\
j\x01\x14\x01\x1a\x01@\x02\x04self\x1c\x07request\x0f\0\x1d\x04\0\x16[method]cli\
ent.request\x01\x1e\x04\x01\x16quelle:http/main@0.1.0\x05\0\x04\x01\x16quelle:ht\
tp/http@0.1.0\x04\0\x0b\x0a\x01\0\x04http\x03\0\0\0G\x09producers\x01\x0cprocess\
ed-by\x02\x0dwit-component\x070.202.0\x10wit-bindgen-rust\x060.24.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
