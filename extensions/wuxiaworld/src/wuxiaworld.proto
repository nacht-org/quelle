syntax = "proto3";
option optimize_for = CODE_SIZE;
package wuxiaworld.api.v2;

import public "google/protobuf/wrappers.proto";
import public "google/protobuf/timestamp.proto";

message StringValue {
    // The string value.
    string value = 1;
}

message BoolValue {
    // The bool value.
    bool value = 1;
}

message Int32Value {
    // The int32 value.
    int32 value = 1;
}

message DecimalValue {
    // Whole units part of the amount
    int64 units = 1;
    // Nano units of the amount (10^-9)
    // Must be the same sign as units
    sfixed32 nanos = 2;
}

message Timestamp {
    int64 seconds = 1;
    int32 nanos = 2;
}

message RelatedChapterUserInfo {
    optional BoolValue isChapterUnlocked = 1;
    optional BoolValue isNovelUnlocked = 2;
    optional BoolValue isChapterFavorite = 3;
    optional BoolValue isNovelOwned = 4;
    optional BoolValue isChapterOwned = 5;
}

message ChapterNovelInfo {
    int32 id = 1;
    string name = 2;
    optional StringValue coverUrl = 3;
    string slug = 4;
}

message ChapterParagraph {
    string id = 1;
    int32 chapterId = 2;
    int32 totalComments = 3;
    optional StringValue content = 4;
}

message ChapterItem {
    int32 entityId = 1;
    string name = 2;
    string slug = 3;
    optional DecimalValue number = 4;
    optional StringValue content = 5;
    int32 novelId = 6;
    bool visible = 7;
    bool isTeaser = 8;
    optional Timestamp whenToPublish = 9;
    bool spoilerTitle = 10;
    bool allowComments = 11;
    optional ChapterNovelInfo novelInfo = 14;
    optional RelatedChapterUserInfo relatedUserInfo = 16;
    int32 offset = 17;
    optional Timestamp publishedAt = 18;
    optional StringValue translatorThoughts = 19;
    repeated ChapterParagraph paragraphs = 21;
}

message ChapterGroupCounts {
    int32 total = 1;
    int32 advance = 2;
    int32 normal = 3;
}

message ChapterGroupItem {
    int32 id = 1;
    string title = 2;
    int32 order = 3;
    optional DecimalValue fromChapterNumber = 4;
    optional DecimalValue toChapterNumber = 5;
    repeated ChapterItem chapterList = 6;
    optional ChapterGroupCounts counts = 7;
}

message GetChapterListRequest {
    int32 novelId = 1;
    message BaseChapterInfo {
        oneof chapterInfo {
            int32 chapterId = 1;
            string slug = 2;
            int32 offset = 3;
        }
    }
    message FilterChapters {
        optional Int32Value chapterGroupId = 1;
        optional BoolValue isAdvanceChapter = 2;
        optional BaseChapterInfo baseChapter = 3;
    }
    optional FilterChapters filter = 2;
    optional Int32Value count = 3;
}

message GetChapterListResponse {
    repeated ChapterGroupItem items = 1;
    optional ChapterNovelInfo novelInfo = 2;
}

message GetChapterByProperty {
    message ByNovelAndChapterSlug {
        string novelSlug = 1;
        string chapterSlug = 2;
    }
    oneof byProperty {
        int32 chapterId = 1;
        ByNovelAndChapterSlug slugs = 2;
    }
}

message GetChapterRequest {
    optional GetChapterByProperty chapterProperty = 1;
}

message GetChapterResponse {
    optional ChapterItem item = 1;
}

message NovelKarmaInfo {
    bool isActive = 1;
    bool isFree = 2;
    optional DecimalValue maxFreeChapter = 3;
    bool canUnlockWithVip = 4;
}

message NovelItem {
    int32 id = 1;
    string name = 2;
    string slug = 3;
    enum Status {
        Finished = 0;
        Active = 1;
        Hiatus = 2;
        All = -1;
    }
    Status status = 4;
    bool visible = 7;
    optional StringValue description = 8;
    optional StringValue synopsis = 9;
    optional StringValue coverUrl = 10;
    optional StringValue translatorName = 11;
    optional StringValue authorName = 13;
    optional NovelKarmaInfo karmaInfo = 14;
    repeated string genres = 16;
}

message GetNovelRequest {
    oneof selector {
        int32 id = 1;
        string slug = 2;
    }
}

message GetNovelResponse {
    optional NovelItem item = 1;
}

service Chapters {
    rpc GetChapterList(GetChapterListRequest) returns (GetChapterListResponse);
    rpc GetChapter(GetChapterRequest) returns (GetChapterResponse);
}

service Novels {
    rpc GetNovel(GetNovelRequest) returns (GetNovelResponse);
}
