interface http {
    enum method {
        get,
        post,
        put,
        delete,
        patch,
        head,
        options,
    }

    record request {
        method: method,
        url: string,
        params: option<list<tuple<string, string>>>,
        data: option<request-body>,
        headers: option<list<tuple<string, string>>>,
        /// Wait for this CSS selector to be present before proceeding (Chrome only)
        wait-for-element: option<string>,
        /// Timeout in milliseconds for element waiting (default: 30000)
        wait-timeout-ms: option<u32>,
    }

    variant request-body {
        raw(list<u8>),
        form(list<tuple<string, form-part>>),
    }

    variant form-part {
        text(string),
        data(data-part),
    }

    record data-part {
        data: list<u8>,
        name: option<string>,
        content-type: option<string>,
    }

    record response {
        status: u16,
        data: option<list<u8>>,
        headers: option<list<tuple<string, string>>>,
    }

    record response-error {
        status: option<u16>,
        kind: response-error-kind,
        response: option<response>,
        message: string,
    }

    enum response-error-kind {
        bad-response,
        connection-error,
        connection-timeout,
        receive-timeout,
        request-cancelled,
        send-timeout,
        element-wait-timeout,
    }

    resource client {
        constructor();
        request: func(request: request) -> result<response, response-error>;
    }
}
