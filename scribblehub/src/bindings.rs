// Generated by `wit-bindgen` 0.24.0. DO NOT EDIT!
// Options used:
#[allow(dead_code)]
pub mod quelle {
    #[allow(dead_code)]
    pub mod core {
        #[allow(dead_code, clippy::all)]
        pub mod source {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum ReadingDirection {
                Ltr,
                Rtl,
            }
            impl ::core::fmt::Debug for ReadingDirection {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        ReadingDirection::Ltr => f.debug_tuple("ReadingDirection::Ltr").finish(),
                        ReadingDirection::Rtl => f.debug_tuple("ReadingDirection::Rtl").finish(),
                    }
                }
            }

            impl ReadingDirection {
                pub(crate) unsafe fn _lift(val: u8) -> ReadingDirection {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => ReadingDirection::Ltr,
                        1 => ReadingDirection::Rtl,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum SourceAttr {
                Fanfiction,
            }
            impl ::core::fmt::Debug for SourceAttr {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        SourceAttr::Fanfiction => f.debug_tuple("SourceAttr::Fanfiction").finish(),
                    }
                }
            }

            impl SourceAttr {
                pub(crate) unsafe fn _lift(val: u8) -> SourceAttr {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => SourceAttr::Fanfiction,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            #[derive(Clone)]
            pub struct SourceMeta {
                pub id: _rt::String,
                pub name: _rt::String,
                pub langs: _rt::Vec<_rt::String>,
                pub version: _rt::String,
                pub base_urls: _rt::Vec<_rt::String>,
                pub rds: _rt::Vec<ReadingDirection>,
                pub attrs: _rt::Vec<SourceAttr>,
            }
            impl ::core::fmt::Debug for SourceMeta {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("SourceMeta")
                        .field("id", &self.id)
                        .field("name", &self.name)
                        .field("langs", &self.langs)
                        .field("version", &self.version)
                        .field("base-urls", &self.base_urls)
                        .field("rds", &self.rds)
                        .field("attrs", &self.attrs)
                        .finish()
                }
            }
        }

        #[allow(dead_code, clippy::all)]
        pub mod novel {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum NovelStatus {
                Ongoing,
                Hiatus,
                Completed,
                Stub,
                Dropped,
                Unknown,
            }
            impl ::core::fmt::Debug for NovelStatus {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        NovelStatus::Ongoing => f.debug_tuple("NovelStatus::Ongoing").finish(),
                        NovelStatus::Hiatus => f.debug_tuple("NovelStatus::Hiatus").finish(),
                        NovelStatus::Completed => f.debug_tuple("NovelStatus::Completed").finish(),
                        NovelStatus::Stub => f.debug_tuple("NovelStatus::Stub").finish(),
                        NovelStatus::Dropped => f.debug_tuple("NovelStatus::Dropped").finish(),
                        NovelStatus::Unknown => f.debug_tuple("NovelStatus::Unknown").finish(),
                    }
                }
            }

            impl NovelStatus {
                pub(crate) unsafe fn _lift(val: u8) -> NovelStatus {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => NovelStatus::Ongoing,
                        1 => NovelStatus::Hiatus,
                        2 => NovelStatus::Completed,
                        3 => NovelStatus::Stub,
                        4 => NovelStatus::Dropped,
                        5 => NovelStatus::Unknown,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            #[derive(Clone)]
            pub struct Chapter {
                pub title: _rt::String,
                pub index: i32,
                pub url: _rt::String,
                pub updated_at: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for Chapter {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Chapter")
                        .field("title", &self.title)
                        .field("index", &self.index)
                        .field("url", &self.url)
                        .field("updated-at", &self.updated_at)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct Volume {
                pub name: _rt::String,
                pub index: i32,
                pub chapters: _rt::Vec<Chapter>,
            }
            impl ::core::fmt::Debug for Volume {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Volume")
                        .field("name", &self.name)
                        .field("index", &self.index)
                        .field("chapters", &self.chapters)
                        .finish()
                }
            }
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum Namespace {
                Dc,
                Opf,
            }
            impl ::core::fmt::Debug for Namespace {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Namespace::Dc => f.debug_tuple("Namespace::Dc").finish(),
                        Namespace::Opf => f.debug_tuple("Namespace::Opf").finish(),
                    }
                }
            }

            impl Namespace {
                pub(crate) unsafe fn _lift(val: u8) -> Namespace {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => Namespace::Dc,
                        1 => Namespace::Opf,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            #[derive(Clone)]
            pub struct Metadata {
                pub name: _rt::String,
                pub value: _rt::String,
                pub ns: Namespace,
                pub others: _rt::Vec<(_rt::String, _rt::String)>,
            }
            impl ::core::fmt::Debug for Metadata {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Metadata")
                        .field("name", &self.name)
                        .field("value", &self.value)
                        .field("ns", &self.ns)
                        .field("others", &self.others)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct Novel {
                pub url: _rt::String,
                pub authors: _rt::Vec<_rt::String>,
                pub title: _rt::String,
                pub cover: Option<_rt::String>,
                pub description: _rt::Vec<_rt::String>,
                pub volumes: _rt::Vec<Volume>,
                pub metadata: _rt::Vec<Metadata>,
                pub status: NovelStatus,
                pub langs: _rt::Vec<_rt::String>,
            }
            impl ::core::fmt::Debug for Novel {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Novel")
                        .field("url", &self.url)
                        .field("authors", &self.authors)
                        .field("title", &self.title)
                        .field("cover", &self.cover)
                        .field("description", &self.description)
                        .field("volumes", &self.volumes)
                        .field("metadata", &self.metadata)
                        .field("status", &self.status)
                        .field("langs", &self.langs)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct ChapterContent {
                pub data: _rt::String,
            }
            impl ::core::fmt::Debug for ChapterContent {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("ChapterContent")
                        .field("data", &self.data)
                        .finish()
                }
            }
        }
    }
    #[allow(dead_code)]
    pub mod http {
        #[allow(dead_code, clippy::all)]
        pub mod outgoing {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            use super::super::super::_rt;
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum Method {
                Get,
                Post,
                Put,
                Delete,
                Patch,
                Head,
                Options,
            }
            impl ::core::fmt::Debug for Method {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Method::Get => f.debug_tuple("Method::Get").finish(),
                        Method::Post => f.debug_tuple("Method::Post").finish(),
                        Method::Put => f.debug_tuple("Method::Put").finish(),
                        Method::Delete => f.debug_tuple("Method::Delete").finish(),
                        Method::Patch => f.debug_tuple("Method::Patch").finish(),
                        Method::Head => f.debug_tuple("Method::Head").finish(),
                        Method::Options => f.debug_tuple("Method::Options").finish(),
                    }
                }
            }

            impl Method {
                pub(crate) unsafe fn _lift(val: u8) -> Method {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => Method::Get,
                        1 => Method::Post,
                        2 => Method::Put,
                        3 => Method::Delete,
                        4 => Method::Patch,
                        5 => Method::Head,
                        6 => Method::Options,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            #[derive(Clone)]
            pub struct DataPart {
                pub data: _rt::Vec<u8>,
                pub name: Option<_rt::String>,
                pub content_type: Option<_rt::String>,
            }
            impl ::core::fmt::Debug for DataPart {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("DataPart")
                        .field("data", &self.data)
                        .field("name", &self.name)
                        .field("content-type", &self.content_type)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub enum FormPart {
                Text(_rt::String),
                Data(DataPart),
            }
            impl ::core::fmt::Debug for FormPart {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        FormPart::Text(e) => f.debug_tuple("FormPart::Text").field(e).finish(),
                        FormPart::Data(e) => f.debug_tuple("FormPart::Data").field(e).finish(),
                    }
                }
            }
            #[derive(Clone)]
            pub enum RequestBody {
                Form(_rt::Vec<(_rt::String, FormPart)>),
            }
            impl ::core::fmt::Debug for RequestBody {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        RequestBody::Form(e) => {
                            f.debug_tuple("RequestBody::Form").field(e).finish()
                        }
                    }
                }
            }
            #[derive(Clone)]
            pub struct Request {
                pub method: Method,
                pub url: _rt::String,
                pub params: Option<_rt::Vec<u8>>,
                pub data: Option<RequestBody>,
                pub headers: Option<_rt::Vec<u8>>,
            }
            impl ::core::fmt::Debug for Request {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Request")
                        .field("method", &self.method)
                        .field("url", &self.url)
                        .field("params", &self.params)
                        .field("data", &self.data)
                        .field("headers", &self.headers)
                        .finish()
                }
            }
            #[derive(Clone)]
            pub struct Response {
                pub status: u16,
                pub data: Option<_rt::Vec<u8>>,
                pub headers: Option<_rt::Vec<(_rt::String, _rt::String)>>,
            }
            impl ::core::fmt::Debug for Response {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Response")
                        .field("status", &self.status)
                        .field("data", &self.data)
                        .field("headers", &self.headers)
                        .finish()
                }
            }
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum ResponseErrorKind {
                BadResponse,
                ConnectionError,
                ConnectionTimeout,
                ReceiveTimeout,
                RequestCancelled,
                SendTimeout,
            }
            impl ::core::fmt::Debug for ResponseErrorKind {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        ResponseErrorKind::BadResponse => {
                            f.debug_tuple("ResponseErrorKind::BadResponse").finish()
                        }
                        ResponseErrorKind::ConnectionError => {
                            f.debug_tuple("ResponseErrorKind::ConnectionError").finish()
                        }
                        ResponseErrorKind::ConnectionTimeout => f
                            .debug_tuple("ResponseErrorKind::ConnectionTimeout")
                            .finish(),
                        ResponseErrorKind::ReceiveTimeout => {
                            f.debug_tuple("ResponseErrorKind::ReceiveTimeout").finish()
                        }
                        ResponseErrorKind::RequestCancelled => f
                            .debug_tuple("ResponseErrorKind::RequestCancelled")
                            .finish(),
                        ResponseErrorKind::SendTimeout => {
                            f.debug_tuple("ResponseErrorKind::SendTimeout").finish()
                        }
                    }
                }
            }

            impl ResponseErrorKind {
                pub(crate) unsafe fn _lift(val: u8) -> ResponseErrorKind {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => ResponseErrorKind::BadResponse,
                        1 => ResponseErrorKind::ConnectionError,
                        2 => ResponseErrorKind::ConnectionTimeout,
                        3 => ResponseErrorKind::ReceiveTimeout,
                        4 => ResponseErrorKind::RequestCancelled,
                        5 => ResponseErrorKind::SendTimeout,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            #[derive(Clone)]
            pub struct ResponseError {
                pub status: Option<u16>,
                pub kind: ResponseErrorKind,
                pub response: Option<Response>,
                pub message: _rt::String,
            }
            impl ::core::fmt::Debug for ResponseError {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("ResponseError")
                        .field("status", &self.status)
                        .field("kind", &self.kind)
                        .field("response", &self.response)
                        .field("message", &self.message)
                        .finish()
                }
            }
            impl ::core::fmt::Display for ResponseError {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    write!(f, "{:?}", self)
                }
            }
            impl std::error::Error for ResponseError {}

            #[derive(Debug)]
            #[repr(transparent)]
            pub struct Client {
                handle: _rt::Resource<Client>,
            }

            impl Client {
                #[doc(hidden)]
                pub unsafe fn from_handle(handle: u32) -> Self {
                    Self {
                        handle: _rt::Resource::from_handle(handle),
                    }
                }

                #[doc(hidden)]
                pub fn take_handle(&self) -> u32 {
                    _rt::Resource::take_handle(&self.handle)
                }

                #[doc(hidden)]
                pub fn handle(&self) -> u32 {
                    _rt::Resource::handle(&self.handle)
                }
            }

            unsafe impl _rt::WasmResource for Client {
                #[inline]
                unsafe fn drop(_handle: u32) {
                    #[cfg(not(target_arch = "wasm32"))]
                    unreachable!();

                    #[cfg(target_arch = "wasm32")]
                    {
                        #[link(wasm_import_module = "quelle:http/outgoing@0.1.0")]
                        extern "C" {
                            #[link_name = "[resource-drop]client"]
                            fn drop(_: u32);
                        }

                        drop(_handle);
                    }
                }
            }

            impl Client {
                #[allow(unused_unsafe, clippy::all)]
                pub fn new() -> Self {
                    unsafe {
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "quelle:http/outgoing@0.1.0")]
                        extern "C" {
                            #[link_name = "[constructor]client"]
                            fn wit_import() -> i32;
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import() -> i32 {
                            unreachable!()
                        }
                        let ret = wit_import();
                        Client::from_handle(ret as u32)
                    }
                }
            }
            impl Client {
                #[allow(unused_unsafe, clippy::all)]
                pub fn request(&self, request: &Request) -> Result<Response, ResponseError> {
                    unsafe {
                        let mut cleanup_list = _rt::Vec::new();
                        #[repr(align(4))]
                        struct RetArea([::core::mem::MaybeUninit<u8>; 52]);
                        let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 52]);
                        let Request {
                            method: method0,
                            url: url0,
                            params: params0,
                            data: data0,
                            headers: headers0,
                        } = request;
                        let vec1 = url0;
                        let ptr1 = vec1.as_ptr().cast::<u8>();
                        let len1 = vec1.len();
                        let (result3_0, result3_1, result3_2) = match params0 {
                            Some(e) => {
                                let vec2 = e;
                                let ptr2 = vec2.as_ptr().cast::<u8>();
                                let len2 = vec2.len();

                                (1i32, ptr2.cast_mut(), len2)
                            }
                            None => (0i32, ::core::ptr::null_mut(), 0usize),
                        };
                        let (result13_0, result13_1, result13_2, result13_3) = match data0 {
                            Some(e) => {
                                let (result12_0, result12_1, result12_2) = match e {
                                    RequestBody::Form(e) => {
                                        let vec11 = e;
                                        let len11 = vec11.len();
                                        let layout11 =
                                            _rt::alloc::Layout::from_size_align_unchecked(
                                                vec11.len() * 44,
                                                4,
                                            );
                                        let result11 = if layout11.size() != 0 {
                                            let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                                            if ptr.is_null() {
                                                _rt::alloc::handle_alloc_error(layout11);
                                            }
                                            ptr
                                        } else {
                                            {
                                                ::core::ptr::null_mut()
                                            }
                                        };
                                        for (i, e) in vec11.into_iter().enumerate() {
                                            let base = result11.add(i * 44);
                                            {
                                                let (t4_0, t4_1) = e;
                                                let vec5 = t4_0;
                                                let ptr5 = vec5.as_ptr().cast::<u8>();
                                                let len5 = vec5.len();
                                                *base.add(4).cast::<usize>() = len5;
                                                *base.add(0).cast::<*mut u8>() = ptr5.cast_mut();
                                                match t4_1 {
                                                    FormPart::Text(e) => {
                                                        *base.add(8).cast::<u8>() = (0i32) as u8;
                                                        let vec6 = e;
                                                        let ptr6 = vec6.as_ptr().cast::<u8>();
                                                        let len6 = vec6.len();
                                                        *base.add(16).cast::<usize>() = len6;
                                                        *base.add(12).cast::<*mut u8>() =
                                                            ptr6.cast_mut();
                                                    }
                                                    FormPart::Data(e) => {
                                                        *base.add(8).cast::<u8>() = (1i32) as u8;
                                                        let DataPart {
                                                            data: data7,
                                                            name: name7,
                                                            content_type: content_type7,
                                                        } = e;
                                                        let vec8 = data7;
                                                        let ptr8 = vec8.as_ptr().cast::<u8>();
                                                        let len8 = vec8.len();
                                                        *base.add(16).cast::<usize>() = len8;
                                                        *base.add(12).cast::<*mut u8>() =
                                                            ptr8.cast_mut();
                                                        match name7 {
                                                            Some(e) => {
                                                                *base.add(20).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                let vec9 = e;
                                                                let ptr9 =
                                                                    vec9.as_ptr().cast::<u8>();
                                                                let len9 = vec9.len();
                                                                *base.add(28).cast::<usize>() =
                                                                    len9;
                                                                *base.add(24).cast::<*mut u8>() =
                                                                    ptr9.cast_mut();
                                                            }
                                                            None => {
                                                                *base.add(20).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                        match content_type7 {
                                                            Some(e) => {
                                                                *base.add(32).cast::<u8>() =
                                                                    (1i32) as u8;
                                                                let vec10 = e;
                                                                let ptr10 =
                                                                    vec10.as_ptr().cast::<u8>();
                                                                let len10 = vec10.len();
                                                                *base.add(40).cast::<usize>() =
                                                                    len10;
                                                                *base.add(36).cast::<*mut u8>() =
                                                                    ptr10.cast_mut();
                                                            }
                                                            None => {
                                                                *base.add(32).cast::<u8>() =
                                                                    (0i32) as u8;
                                                            }
                                                        };
                                                    }
                                                }
                                            }
                                        }
                                        cleanup_list.extend_from_slice(&[(result11, layout11)]);

                                        (0i32, result11, len11)
                                    }
                                };

                                (1i32, result12_0, result12_1, result12_2)
                            }
                            None => (0i32, 0i32, ::core::ptr::null_mut(), 0usize),
                        };
                        let (result15_0, result15_1, result15_2) = match headers0 {
                            Some(e) => {
                                let vec14 = e;
                                let ptr14 = vec14.as_ptr().cast::<u8>();
                                let len14 = vec14.len();

                                (1i32, ptr14.cast_mut(), len14)
                            }
                            None => (0i32, ::core::ptr::null_mut(), 0usize),
                        };
                        let ptr16 = ret_area.0.as_mut_ptr().cast::<u8>();
                        #[cfg(target_arch = "wasm32")]
                        #[link(wasm_import_module = "quelle:http/outgoing@0.1.0")]
                        extern "C" {
                            #[link_name = "[method]client.request"]
                            fn wit_import(
                                _: i32,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: i32,
                                _: *mut u8,
                                _: usize,
                                _: *mut u8,
                            );
                        }

                        #[cfg(not(target_arch = "wasm32"))]
                        fn wit_import(
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: i32,
                            _: *mut u8,
                            _: usize,
                            _: *mut u8,
                        ) {
                            unreachable!()
                        }
                        wit_import(
                            (self).handle() as i32,
                            method0.clone() as i32,
                            ptr1.cast_mut(),
                            len1,
                            result3_0,
                            result3_1,
                            result3_2,
                            result13_0,
                            result13_1,
                            result13_2,
                            result13_3,
                            result15_0,
                            result15_1,
                            result15_2,
                            ptr16,
                        );
                        let l17 = i32::from(*ptr16.add(0).cast::<u8>());
                        for (ptr, layout) in cleanup_list {
                            if layout.size() != 0 {
                                _rt::alloc::dealloc(ptr.cast(), layout);
                            }
                        }
                        match l17 {
                            0 => {
                                let e = {
                                    let l18 = i32::from(*ptr16.add(4).cast::<u16>());
                                    let l19 = i32::from(*ptr16.add(8).cast::<u8>());
                                    let l23 = i32::from(*ptr16.add(20).cast::<u8>());

                                    Response {
                                        status: l18 as u16,
                                        data: match l19 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l20 = *ptr16.add(12).cast::<*mut u8>();
                                                    let l21 = *ptr16.add(16).cast::<usize>();
                                                    let len22 = l21;

                                                    _rt::Vec::from_raw_parts(
                                                        l20.cast(),
                                                        len22,
                                                        len22,
                                                    )
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        headers: match l23 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l24 = *ptr16.add(24).cast::<*mut u8>();
                                                    let l25 = *ptr16.add(28).cast::<usize>();
                                                    let base32 = l24;
                                                    let len32 = l25;
                                                    let mut result32 =
                                                        _rt::Vec::with_capacity(len32);
                                                    for i in 0..len32 {
                                                        let base = base32.add(i * 16);
                                                        let e32 = {
                                                            let l26 =
                                                                *base.add(0).cast::<*mut u8>();
                                                            let l27 = *base.add(4).cast::<usize>();
                                                            let len28 = l27;
                                                            let bytes28 = _rt::Vec::from_raw_parts(
                                                                l26.cast(),
                                                                len28,
                                                                len28,
                                                            );
                                                            let l29 =
                                                                *base.add(8).cast::<*mut u8>();
                                                            let l30 = *base.add(12).cast::<usize>();
                                                            let len31 = l30;
                                                            let bytes31 = _rt::Vec::from_raw_parts(
                                                                l29.cast(),
                                                                len31,
                                                                len31,
                                                            );

                                                            (
                                                                _rt::string_lift(bytes28),
                                                                _rt::string_lift(bytes31),
                                                            )
                                                        };
                                                        result32.push(e32);
                                                    }
                                                    _rt::cabi_dealloc(base32, len32 * 16, 4);

                                                    result32
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                    }
                                };
                                Ok(e)
                            }
                            1 => {
                                let e = {
                                    let l33 = i32::from(*ptr16.add(4).cast::<u8>());
                                    let l35 = i32::from(*ptr16.add(8).cast::<u8>());
                                    let l36 = i32::from(*ptr16.add(12).cast::<u8>());
                                    let l52 = *ptr16.add(44).cast::<*mut u8>();
                                    let l53 = *ptr16.add(48).cast::<usize>();
                                    let len54 = l53;
                                    let bytes54 =
                                        _rt::Vec::from_raw_parts(l52.cast(), len54, len54);

                                    ResponseError {
                                        status: match l33 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l34 =
                                                        i32::from(*ptr16.add(6).cast::<u16>());

                                                    l34 as u16
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        kind: ResponseErrorKind::_lift(l35 as u8),
                                        response: match l36 {
                                            0 => None,
                                            1 => {
                                                let e = {
                                                    let l37 =
                                                        i32::from(*ptr16.add(16).cast::<u16>());
                                                    let l38 =
                                                        i32::from(*ptr16.add(20).cast::<u8>());
                                                    let l42 =
                                                        i32::from(*ptr16.add(32).cast::<u8>());

                                                    Response {
                                                        status: l37 as u16,
                                                        data: match l38 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l39 = *ptr16
                                                                        .add(24)
                                                                        .cast::<*mut u8>();
                                                                    let l40 = *ptr16
                                                                        .add(28)
                                                                        .cast::<usize>();
                                                                    let len41 = l40;

                                                                    _rt::Vec::from_raw_parts(
                                                                        l39.cast(),
                                                                        len41,
                                                                        len41,
                                                                    )
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                        headers: match l42 {
                                                            0 => None,
                                                            1 => {
                                                                let e = {
                                                                    let l43 = *ptr16
                                                                        .add(36)
                                                                        .cast::<*mut u8>();
                                                                    let l44 = *ptr16
                                                                        .add(40)
                                                                        .cast::<usize>();
                                                                    let base51 = l43;
                                                                    let len51 = l44;
                                                                    let mut result51 =
                                                                        _rt::Vec::with_capacity(
                                                                            len51,
                                                                        );
                                                                    for i in 0..len51 {
                                                                        let base =
                                                                            base51.add(i * 16);
                                                                        let e51 = {
                                                                            let l45 = *base
                                                                                .add(0)
                                                                                .cast::<*mut u8>(
                                                                            );
                                                                            let l46 = *base
                                                                                .add(4)
                                                                                .cast::<usize>(
                                                                            );
                                                                            let len47 = l46;
                                                                            let bytes47 = _rt::Vec::from_raw_parts(l45.cast(), len47, len47);
                                                                            let l48 = *base
                                                                                .add(8)
                                                                                .cast::<*mut u8>(
                                                                            );
                                                                            let l49 = *base
                                                                                .add(12)
                                                                                .cast::<usize>();
                                                                            let len50 = l49;
                                                                            let bytes50 = _rt::Vec::from_raw_parts(l48.cast(), len50, len50);

                                                                            (
                                                                                _rt::string_lift(
                                                                                    bytes47,
                                                                                ),
                                                                                _rt::string_lift(
                                                                                    bytes50,
                                                                                ),
                                                                            )
                                                                        };
                                                                        result51.push(e51);
                                                                    }
                                                                    _rt::cabi_dealloc(
                                                                        base51,
                                                                        len51 * 16,
                                                                        4,
                                                                    );

                                                                    result51
                                                                };
                                                                Some(e)
                                                            }
                                                            _ => _rt::invalid_enum_discriminant(),
                                                        },
                                                    }
                                                };
                                                Some(e)
                                            }
                                            _ => _rt::invalid_enum_discriminant(),
                                        },
                                        message: _rt::string_lift(bytes54),
                                    }
                                };
                                Err(e)
                            }
                            _ => _rt::invalid_enum_discriminant(),
                        }
                    }
                }
            }
        }
    }
}
#[allow(dead_code)]
pub mod exports {
    #[allow(dead_code)]
    pub mod quelle {
        #[allow(dead_code)]
        pub mod extension {
            #[allow(dead_code, clippy::all)]
            pub mod meta {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type SourceMeta = super::super::super::super::quelle::core::source::SourceMeta;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_extension_info_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::extension_info();
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let super::super::super::super::quelle::core::source::SourceMeta {
                        id: id2,
                        name: name2,
                        langs: langs2,
                        version: version2,
                        base_urls: base_urls2,
                        rds: rds2,
                        attrs: attrs2,
                    } = result0;
                    let vec3 = (id2.into_bytes()).into_boxed_slice();
                    let ptr3 = vec3.as_ptr().cast::<u8>();
                    let len3 = vec3.len();
                    ::core::mem::forget(vec3);
                    *ptr1.add(4).cast::<usize>() = len3;
                    *ptr1.add(0).cast::<*mut u8>() = ptr3.cast_mut();
                    let vec4 = (name2.into_bytes()).into_boxed_slice();
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();
                    ::core::mem::forget(vec4);
                    *ptr1.add(12).cast::<usize>() = len4;
                    *ptr1.add(8).cast::<*mut u8>() = ptr4.cast_mut();
                    let vec6 = langs2;
                    let len6 = vec6.len();
                    let layout6 = _rt::alloc::Layout::from_size_align_unchecked(vec6.len() * 8, 4);
                    let result6 = if layout6.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout6).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout6);
                        }
                        ptr
                    } else {
                        {
                            ::core::ptr::null_mut()
                        }
                    };
                    for (i, e) in vec6.into_iter().enumerate() {
                        let base = result6.add(i * 8);
                        {
                            let vec5 = (e.into_bytes()).into_boxed_slice();
                            let ptr5 = vec5.as_ptr().cast::<u8>();
                            let len5 = vec5.len();
                            ::core::mem::forget(vec5);
                            *base.add(4).cast::<usize>() = len5;
                            *base.add(0).cast::<*mut u8>() = ptr5.cast_mut();
                        }
                    }
                    *ptr1.add(20).cast::<usize>() = len6;
                    *ptr1.add(16).cast::<*mut u8>() = result6;
                    let vec7 = (version2.into_bytes()).into_boxed_slice();
                    let ptr7 = vec7.as_ptr().cast::<u8>();
                    let len7 = vec7.len();
                    ::core::mem::forget(vec7);
                    *ptr1.add(28).cast::<usize>() = len7;
                    *ptr1.add(24).cast::<*mut u8>() = ptr7.cast_mut();
                    let vec9 = base_urls2;
                    let len9 = vec9.len();
                    let layout9 = _rt::alloc::Layout::from_size_align_unchecked(vec9.len() * 8, 4);
                    let result9 = if layout9.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout9).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout9);
                        }
                        ptr
                    } else {
                        {
                            ::core::ptr::null_mut()
                        }
                    };
                    for (i, e) in vec9.into_iter().enumerate() {
                        let base = result9.add(i * 8);
                        {
                            let vec8 = (e.into_bytes()).into_boxed_slice();
                            let ptr8 = vec8.as_ptr().cast::<u8>();
                            let len8 = vec8.len();
                            ::core::mem::forget(vec8);
                            *base.add(4).cast::<usize>() = len8;
                            *base.add(0).cast::<*mut u8>() = ptr8.cast_mut();
                        }
                    }
                    *ptr1.add(36).cast::<usize>() = len9;
                    *ptr1.add(32).cast::<*mut u8>() = result9;
                    let vec10 = rds2;
                    let len10 = vec10.len();
                    let layout10 =
                        _rt::alloc::Layout::from_size_align_unchecked(vec10.len() * 1, 1);
                    let result10 = if layout10.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout10).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout10);
                        }
                        ptr
                    } else {
                        {
                            ::core::ptr::null_mut()
                        }
                    };
                    for (i, e) in vec10.into_iter().enumerate() {
                        let base = result10.add(i * 1);
                        {
                            *base.add(0).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    }
                    *ptr1.add(44).cast::<usize>() = len10;
                    *ptr1.add(40).cast::<*mut u8>() = result10;
                    let vec11 = attrs2;
                    let len11 = vec11.len();
                    let layout11 =
                        _rt::alloc::Layout::from_size_align_unchecked(vec11.len() * 1, 1);
                    let result11 = if layout11.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout11).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout11);
                        }
                        ptr
                    } else {
                        {
                            ::core::ptr::null_mut()
                        }
                    };
                    for (i, e) in vec11.into_iter().enumerate() {
                        let base = result11.add(i * 1);
                        {
                            *base.add(0).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                    }
                    *ptr1.add(52).cast::<usize>() = len11;
                    *ptr1.add(48).cast::<*mut u8>() = result11;
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_extension_info<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0.add(4).cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                    let l2 = *arg0.add(8).cast::<*mut u8>();
                    let l3 = *arg0.add(12).cast::<usize>();
                    _rt::cabi_dealloc(l2, l3, 1);
                    let l6 = *arg0.add(16).cast::<*mut u8>();
                    let l7 = *arg0.add(20).cast::<usize>();
                    let base8 = l6;
                    let len8 = l7;
                    for i in 0..len8 {
                        let base = base8.add(i * 8);
                        {
                            let l4 = *base.add(0).cast::<*mut u8>();
                            let l5 = *base.add(4).cast::<usize>();
                            _rt::cabi_dealloc(l4, l5, 1);
                        }
                    }
                    _rt::cabi_dealloc(base8, len8 * 8, 4);
                    let l9 = *arg0.add(24).cast::<*mut u8>();
                    let l10 = *arg0.add(28).cast::<usize>();
                    _rt::cabi_dealloc(l9, l10, 1);
                    let l13 = *arg0.add(32).cast::<*mut u8>();
                    let l14 = *arg0.add(36).cast::<usize>();
                    let base15 = l13;
                    let len15 = l14;
                    for i in 0..len15 {
                        let base = base15.add(i * 8);
                        {
                            let l11 = *base.add(0).cast::<*mut u8>();
                            let l12 = *base.add(4).cast::<usize>();
                            _rt::cabi_dealloc(l11, l12, 1);
                        }
                    }
                    _rt::cabi_dealloc(base15, len15 * 8, 4);
                    let l16 = *arg0.add(40).cast::<*mut u8>();
                    let l17 = *arg0.add(44).cast::<usize>();
                    let base18 = l16;
                    let len18 = l17;
                    _rt::cabi_dealloc(base18, len18 * 1, 1);
                    let l19 = *arg0.add(48).cast::<*mut u8>();
                    let l20 = *arg0.add(52).cast::<usize>();
                    let base21 = l19;
                    let len21 = l20;
                    _rt::cabi_dealloc(base21, len21 * 1, 1);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_setup_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::setup();
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Ok(_) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                        Err(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            let vec2 = (e.into_bytes()).into_boxed_slice();
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            ::core::mem::forget(vec2);
                            *ptr1.add(8).cast::<usize>() = len2;
                            *ptr1.add(4).cast::<*mut u8>() = ptr2.cast_mut();
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_setup<T: Guest>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                pub trait Guest {
                    fn extension_info() -> SourceMeta;
                    fn setup() -> Result<(), _rt::String>;
                }
                #[doc(hidden)]

                macro_rules! __export_quelle_extension_meta_0_1_0_cabi{
        ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

          #[export_name = "quelle:extension/meta@0.1.0#extension-info"]
          unsafe extern "C" fn export_extension_info() -> *mut u8 {
            $($path_to_types)*::_export_extension_info_cabi::<$ty>()
          }
          #[export_name = "cabi_post_quelle:extension/meta@0.1.0#extension-info"]
          unsafe extern "C" fn _post_return_extension_info(arg0: *mut u8,) {
            $($path_to_types)*::__post_return_extension_info::<$ty>(arg0)
          }
          #[export_name = "quelle:extension/meta@0.1.0#setup"]
          unsafe extern "C" fn export_setup() -> *mut u8 {
            $($path_to_types)*::_export_setup_cabi::<$ty>()
          }
          #[export_name = "cabi_post_quelle:extension/meta@0.1.0#setup"]
          unsafe extern "C" fn _post_return_setup(arg0: *mut u8,) {
            $($path_to_types)*::__post_return_setup::<$ty>(arg0)
          }
        };);
      }
                #[doc(hidden)]
                pub(crate) use __export_quelle_extension_meta_0_1_0_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 56]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 56]);
            }

            #[allow(dead_code, clippy::all)]
            pub mod instance {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type Novel = super::super::super::super::quelle::core::novel::Novel;
                pub type ChapterContent =
                    super::super::super::super::quelle::core::novel::ChapterContent;

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Source {
                    handle: _rt::Resource<Source>,
                }

                type _SourceRep<T> = Option<T>;

                impl Source {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `Source`.
                    pub fn new<T: GuestSource>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _SourceRep<T> = Some(val);
                        let ptr: *mut _SourceRep<T> = _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestSource>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestSource>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestSource>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: _rt::Resource::from_handle(handle),
                        }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestSource` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(
                                    ty == id,
                                    "cannot use two types with this resource type"
                                ),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(handle as *mut _SourceRep<T>);
                    }

                    fn as_ptr<T: GuestSource>(&self) -> *mut _SourceRep<T> {
                        Source::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }

                /// A borrowed version of [`Source`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct SourceBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Source>,
                }

                impl<'a> SourceBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestSource>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(&self) -> *mut _SourceRep<T> {
                        Source::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for Source {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]quelle:extension/instance@0.1.0")]
                            extern "C" {
                                #[link_name = "[resource-drop]source"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_constructor_source_cabi<T: GuestSource>() -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = Source::new(T::new());
                    (result0).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_source_novel_info_cabi<T: GuestSource>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let result1 = T::novel_info(
                        SourceBorrow::lift(arg0 as u32 as usize).get(),
                        _rt::string_lift(bytes0),
                    );
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(e) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                            let super::super::super::super::quelle::core::novel::Novel {
                                url: url3,
                                authors: authors3,
                                title: title3,
                                cover: cover3,
                                description: description3,
                                volumes: volumes3,
                                metadata: metadata3,
                                status: status3,
                                langs: langs3,
                            } = e;
                            let vec4 = (url3.into_bytes()).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *ptr2.add(8).cast::<usize>() = len4;
                            *ptr2.add(4).cast::<*mut u8>() = ptr4.cast_mut();
                            let vec6 = authors3;
                            let len6 = vec6.len();
                            let layout6 =
                                _rt::alloc::Layout::from_size_align_unchecked(vec6.len() * 8, 4);
                            let result6 = if layout6.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout6).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout6);
                                }
                                ptr
                            } else {
                                {
                                    ::core::ptr::null_mut()
                                }
                            };
                            for (i, e) in vec6.into_iter().enumerate() {
                                let base = result6.add(i * 8);
                                {
                                    let vec5 = (e.into_bytes()).into_boxed_slice();
                                    let ptr5 = vec5.as_ptr().cast::<u8>();
                                    let len5 = vec5.len();
                                    ::core::mem::forget(vec5);
                                    *base.add(4).cast::<usize>() = len5;
                                    *base.add(0).cast::<*mut u8>() = ptr5.cast_mut();
                                }
                            }
                            *ptr2.add(16).cast::<usize>() = len6;
                            *ptr2.add(12).cast::<*mut u8>() = result6;
                            let vec7 = (title3.into_bytes()).into_boxed_slice();
                            let ptr7 = vec7.as_ptr().cast::<u8>();
                            let len7 = vec7.len();
                            ::core::mem::forget(vec7);
                            *ptr2.add(24).cast::<usize>() = len7;
                            *ptr2.add(20).cast::<*mut u8>() = ptr7.cast_mut();
                            match cover3 {
                                Some(e) => {
                                    *ptr2.add(28).cast::<u8>() = (1i32) as u8;
                                    let vec8 = (e.into_bytes()).into_boxed_slice();
                                    let ptr8 = vec8.as_ptr().cast::<u8>();
                                    let len8 = vec8.len();
                                    ::core::mem::forget(vec8);
                                    *ptr2.add(36).cast::<usize>() = len8;
                                    *ptr2.add(32).cast::<*mut u8>() = ptr8.cast_mut();
                                }
                                None => {
                                    *ptr2.add(28).cast::<u8>() = (0i32) as u8;
                                }
                            };
                            let vec10 = description3;
                            let len10 = vec10.len();
                            let layout10 =
                                _rt::alloc::Layout::from_size_align_unchecked(vec10.len() * 8, 4);
                            let result10 = if layout10.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout10).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout10);
                                }
                                ptr
                            } else {
                                {
                                    ::core::ptr::null_mut()
                                }
                            };
                            for (i, e) in vec10.into_iter().enumerate() {
                                let base = result10.add(i * 8);
                                {
                                    let vec9 = (e.into_bytes()).into_boxed_slice();
                                    let ptr9 = vec9.as_ptr().cast::<u8>();
                                    let len9 = vec9.len();
                                    ::core::mem::forget(vec9);
                                    *base.add(4).cast::<usize>() = len9;
                                    *base.add(0).cast::<*mut u8>() = ptr9.cast_mut();
                                }
                            }
                            *ptr2.add(44).cast::<usize>() = len10;
                            *ptr2.add(40).cast::<*mut u8>() = result10;
                            let vec18 = volumes3;
                            let len18 = vec18.len();
                            let layout18 =
                                _rt::alloc::Layout::from_size_align_unchecked(vec18.len() * 20, 4);
                            let result18 = if layout18.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout18).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout18);
                                }
                                ptr
                            } else {
                                {
                                    ::core::ptr::null_mut()
                                }
                            };
                            for (i, e) in vec18.into_iter().enumerate() {
                                let base = result18.add(i * 20);
                                {
                                    let super::super::super::super::quelle::core::novel::Volume {
                                        name: name11,
                                        index: index11,
                                        chapters: chapters11,
                                    } = e;
                                    let vec12 = (name11.into_bytes()).into_boxed_slice();
                                    let ptr12 = vec12.as_ptr().cast::<u8>();
                                    let len12 = vec12.len();
                                    ::core::mem::forget(vec12);
                                    *base.add(4).cast::<usize>() = len12;
                                    *base.add(0).cast::<*mut u8>() = ptr12.cast_mut();
                                    *base.add(8).cast::<i32>() = _rt::as_i32(index11);
                                    let vec17 = chapters11;
                                    let len17 = vec17.len();
                                    let layout17 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec17.len() * 32,
                                        4,
                                    );
                                    let result17 = if layout17.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout17).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout17);
                                        }
                                        ptr
                                    } else {
                                        {
                                            ::core::ptr::null_mut()
                                        }
                                    };
                                    for (i, e) in vec17.into_iter().enumerate() {
                                        let base = result17.add(i * 32);
                                        {
                                            let super::super::super::super::quelle::core::novel::Chapter{ title:title13, index:index13, url:url13, updated_at:updated_at13, } = e;
                                            let vec14 = (title13.into_bytes()).into_boxed_slice();
                                            let ptr14 = vec14.as_ptr().cast::<u8>();
                                            let len14 = vec14.len();
                                            ::core::mem::forget(vec14);
                                            *base.add(4).cast::<usize>() = len14;
                                            *base.add(0).cast::<*mut u8>() = ptr14.cast_mut();
                                            *base.add(8).cast::<i32>() = _rt::as_i32(index13);
                                            let vec15 = (url13.into_bytes()).into_boxed_slice();
                                            let ptr15 = vec15.as_ptr().cast::<u8>();
                                            let len15 = vec15.len();
                                            ::core::mem::forget(vec15);
                                            *base.add(16).cast::<usize>() = len15;
                                            *base.add(12).cast::<*mut u8>() = ptr15.cast_mut();
                                            match updated_at13 {
                                                Some(e) => {
                                                    *base.add(20).cast::<u8>() = (1i32) as u8;
                                                    let vec16 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr16 = vec16.as_ptr().cast::<u8>();
                                                    let len16 = vec16.len();
                                                    ::core::mem::forget(vec16);
                                                    *base.add(28).cast::<usize>() = len16;
                                                    *base.add(24).cast::<*mut u8>() =
                                                        ptr16.cast_mut();
                                                }
                                                None => {
                                                    *base.add(20).cast::<u8>() = (0i32) as u8;
                                                }
                                            };
                                        }
                                    }
                                    *base.add(16).cast::<usize>() = len17;
                                    *base.add(12).cast::<*mut u8>() = result17;
                                }
                            }
                            *ptr2.add(52).cast::<usize>() = len18;
                            *ptr2.add(48).cast::<*mut u8>() = result18;
                            let vec26 = metadata3;
                            let len26 = vec26.len();
                            let layout26 =
                                _rt::alloc::Layout::from_size_align_unchecked(vec26.len() * 28, 4);
                            let result26 = if layout26.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout26).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout26);
                                }
                                ptr
                            } else {
                                {
                                    ::core::ptr::null_mut()
                                }
                            };
                            for (i, e) in vec26.into_iter().enumerate() {
                                let base = result26.add(i * 28);
                                {
                                    let super::super::super::super::quelle::core::novel::Metadata {
                                        name: name19,
                                        value: value19,
                                        ns: ns19,
                                        others: others19,
                                    } = e;
                                    let vec20 = (name19.into_bytes()).into_boxed_slice();
                                    let ptr20 = vec20.as_ptr().cast::<u8>();
                                    let len20 = vec20.len();
                                    ::core::mem::forget(vec20);
                                    *base.add(4).cast::<usize>() = len20;
                                    *base.add(0).cast::<*mut u8>() = ptr20.cast_mut();
                                    let vec21 = (value19.into_bytes()).into_boxed_slice();
                                    let ptr21 = vec21.as_ptr().cast::<u8>();
                                    let len21 = vec21.len();
                                    ::core::mem::forget(vec21);
                                    *base.add(12).cast::<usize>() = len21;
                                    *base.add(8).cast::<*mut u8>() = ptr21.cast_mut();
                                    *base.add(16).cast::<u8>() = (ns19.clone() as i32) as u8;
                                    let vec25 = others19;
                                    let len25 = vec25.len();
                                    let layout25 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec25.len() * 16,
                                        4,
                                    );
                                    let result25 = if layout25.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout25).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout25);
                                        }
                                        ptr
                                    } else {
                                        {
                                            ::core::ptr::null_mut()
                                        }
                                    };
                                    for (i, e) in vec25.into_iter().enumerate() {
                                        let base = result25.add(i * 16);
                                        {
                                            let (t22_0, t22_1) = e;
                                            let vec23 = (t22_0.into_bytes()).into_boxed_slice();
                                            let ptr23 = vec23.as_ptr().cast::<u8>();
                                            let len23 = vec23.len();
                                            ::core::mem::forget(vec23);
                                            *base.add(4).cast::<usize>() = len23;
                                            *base.add(0).cast::<*mut u8>() = ptr23.cast_mut();
                                            let vec24 = (t22_1.into_bytes()).into_boxed_slice();
                                            let ptr24 = vec24.as_ptr().cast::<u8>();
                                            let len24 = vec24.len();
                                            ::core::mem::forget(vec24);
                                            *base.add(12).cast::<usize>() = len24;
                                            *base.add(8).cast::<*mut u8>() = ptr24.cast_mut();
                                        }
                                    }
                                    *base.add(24).cast::<usize>() = len25;
                                    *base.add(20).cast::<*mut u8>() = result25;
                                }
                            }
                            *ptr2.add(60).cast::<usize>() = len26;
                            *ptr2.add(56).cast::<*mut u8>() = result26;
                            *ptr2.add(64).cast::<u8>() = (status3.clone() as i32) as u8;
                            let vec28 = langs3;
                            let len28 = vec28.len();
                            let layout28 =
                                _rt::alloc::Layout::from_size_align_unchecked(vec28.len() * 8, 4);
                            let result28 = if layout28.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout28).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout28);
                                }
                                ptr
                            } else {
                                {
                                    ::core::ptr::null_mut()
                                }
                            };
                            for (i, e) in vec28.into_iter().enumerate() {
                                let base = result28.add(i * 8);
                                {
                                    let vec27 = (e.into_bytes()).into_boxed_slice();
                                    let ptr27 = vec27.as_ptr().cast::<u8>();
                                    let len27 = vec27.len();
                                    ::core::mem::forget(vec27);
                                    *base.add(4).cast::<usize>() = len27;
                                    *base.add(0).cast::<*mut u8>() = ptr27.cast_mut();
                                }
                            }
                            *ptr2.add(72).cast::<usize>() = len28;
                            *ptr2.add(68).cast::<*mut u8>() = result28;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            let vec29 = (e.into_bytes()).into_boxed_slice();
                            let ptr29 = vec29.as_ptr().cast::<u8>();
                            let len29 = vec29.len();
                            ::core::mem::forget(vec29);
                            *ptr2.add(8).cast::<usize>() = len29;
                            *ptr2.add(4).cast::<*mut u8>() = ptr29.cast_mut();
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_source_novel_info<T: GuestSource>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                            let l5 = *arg0.add(12).cast::<*mut u8>();
                            let l6 = *arg0.add(16).cast::<usize>();
                            let base7 = l5;
                            let len7 = l6;
                            for i in 0..len7 {
                                let base = base7.add(i * 8);
                                {
                                    let l3 = *base.add(0).cast::<*mut u8>();
                                    let l4 = *base.add(4).cast::<usize>();
                                    _rt::cabi_dealloc(l3, l4, 1);
                                }
                            }
                            _rt::cabi_dealloc(base7, len7 * 8, 4);
                            let l8 = *arg0.add(20).cast::<*mut u8>();
                            let l9 = *arg0.add(24).cast::<usize>();
                            _rt::cabi_dealloc(l8, l9, 1);
                            let l10 = i32::from(*arg0.add(28).cast::<u8>());
                            match l10 {
                                0 => (),
                                _ => {
                                    let l11 = *arg0.add(32).cast::<*mut u8>();
                                    let l12 = *arg0.add(36).cast::<usize>();
                                    _rt::cabi_dealloc(l11, l12, 1);
                                }
                            }
                            let l15 = *arg0.add(40).cast::<*mut u8>();
                            let l16 = *arg0.add(44).cast::<usize>();
                            let base17 = l15;
                            let len17 = l16;
                            for i in 0..len17 {
                                let base = base17.add(i * 8);
                                {
                                    let l13 = *base.add(0).cast::<*mut u8>();
                                    let l14 = *base.add(4).cast::<usize>();
                                    _rt::cabi_dealloc(l13, l14, 1);
                                }
                            }
                            _rt::cabi_dealloc(base17, len17 * 8, 4);
                            let l30 = *arg0.add(48).cast::<*mut u8>();
                            let l31 = *arg0.add(52).cast::<usize>();
                            let base32 = l30;
                            let len32 = l31;
                            for i in 0..len32 {
                                let base = base32.add(i * 20);
                                {
                                    let l18 = *base.add(0).cast::<*mut u8>();
                                    let l19 = *base.add(4).cast::<usize>();
                                    _rt::cabi_dealloc(l18, l19, 1);
                                    let l27 = *base.add(12).cast::<*mut u8>();
                                    let l28 = *base.add(16).cast::<usize>();
                                    let base29 = l27;
                                    let len29 = l28;
                                    for i in 0..len29 {
                                        let base = base29.add(i * 32);
                                        {
                                            let l20 = *base.add(0).cast::<*mut u8>();
                                            let l21 = *base.add(4).cast::<usize>();
                                            _rt::cabi_dealloc(l20, l21, 1);
                                            let l22 = *base.add(12).cast::<*mut u8>();
                                            let l23 = *base.add(16).cast::<usize>();
                                            _rt::cabi_dealloc(l22, l23, 1);
                                            let l24 = i32::from(*base.add(20).cast::<u8>());
                                            match l24 {
                                                0 => (),
                                                _ => {
                                                    let l25 = *base.add(24).cast::<*mut u8>();
                                                    let l26 = *base.add(28).cast::<usize>();
                                                    _rt::cabi_dealloc(l25, l26, 1);
                                                }
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(base29, len29 * 32, 4);
                                }
                            }
                            _rt::cabi_dealloc(base32, len32 * 20, 4);
                            let l44 = *arg0.add(56).cast::<*mut u8>();
                            let l45 = *arg0.add(60).cast::<usize>();
                            let base46 = l44;
                            let len46 = l45;
                            for i in 0..len46 {
                                let base = base46.add(i * 28);
                                {
                                    let l33 = *base.add(0).cast::<*mut u8>();
                                    let l34 = *base.add(4).cast::<usize>();
                                    _rt::cabi_dealloc(l33, l34, 1);
                                    let l35 = *base.add(8).cast::<*mut u8>();
                                    let l36 = *base.add(12).cast::<usize>();
                                    _rt::cabi_dealloc(l35, l36, 1);
                                    let l41 = *base.add(20).cast::<*mut u8>();
                                    let l42 = *base.add(24).cast::<usize>();
                                    let base43 = l41;
                                    let len43 = l42;
                                    for i in 0..len43 {
                                        let base = base43.add(i * 16);
                                        {
                                            let l37 = *base.add(0).cast::<*mut u8>();
                                            let l38 = *base.add(4).cast::<usize>();
                                            _rt::cabi_dealloc(l37, l38, 1);
                                            let l39 = *base.add(8).cast::<*mut u8>();
                                            let l40 = *base.add(12).cast::<usize>();
                                            _rt::cabi_dealloc(l39, l40, 1);
                                        }
                                    }
                                    _rt::cabi_dealloc(base43, len43 * 16, 4);
                                }
                            }
                            _rt::cabi_dealloc(base46, len46 * 28, 4);
                            let l49 = *arg0.add(68).cast::<*mut u8>();
                            let l50 = *arg0.add(72).cast::<usize>();
                            let base51 = l49;
                            let len51 = l50;
                            for i in 0..len51 {
                                let base = base51.add(i * 8);
                                {
                                    let l47 = *base.add(0).cast::<*mut u8>();
                                    let l48 = *base.add(4).cast::<usize>();
                                    _rt::cabi_dealloc(l47, l48, 1);
                                }
                            }
                            _rt::cabi_dealloc(base51, len51 * 8, 4);
                        }
                        _ => {
                            let l52 = *arg0.add(4).cast::<*mut u8>();
                            let l53 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l52, l53, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_source_chapter_content_cabi<T: GuestSource>(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg2;
                    let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);
                    let result1 = T::chapter_content(
                        SourceBorrow::lift(arg0 as u32 as usize).get(),
                        _rt::string_lift(bytes0),
                    );
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(e) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                            let super::super::super::super::quelle::core::novel::ChapterContent {
                                data: data3,
                            } = e;
                            let vec4 = (data3.into_bytes()).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *ptr2.add(8).cast::<usize>() = len4;
                            *ptr2.add(4).cast::<*mut u8>() = ptr4.cast_mut();
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            let vec5 = (e.into_bytes()).into_boxed_slice();
                            let ptr5 = vec5.as_ptr().cast::<u8>();
                            let len5 = vec5.len();
                            ::core::mem::forget(vec5);
                            *ptr2.add(8).cast::<usize>() = len5;
                            *ptr2.add(4).cast::<*mut u8>() = ptr5.cast_mut();
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_source_chapter_content<T: GuestSource>(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                        _ => {
                            let l3 = *arg0.add(4).cast::<*mut u8>();
                            let l4 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l3, l4, 1);
                        }
                    }
                }
                pub trait Guest {
                    type Source: GuestSource;
                }
                pub trait GuestSource: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]quelle:extension/instance@0.1.0")]
                            extern "C" {
                                #[link_name = "[resource-new]source"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]quelle:extension/instance@0.1.0")]
                            extern "C" {
                                #[link_name = "[resource-rep]source"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }

                    fn new() -> Self;
                    fn novel_info(&self, url: _rt::String) -> Result<Novel, _rt::String>;
                    fn chapter_content(
                        &self,
                        url: _rt::String,
                    ) -> Result<ChapterContent, _rt::String>;
                }
                #[doc(hidden)]

                macro_rules! __export_quelle_extension_instance_0_1_0_cabi{
    ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

      #[export_name = "quelle:extension/instance@0.1.0#[constructor]source"]
      unsafe extern "C" fn export_constructor_source() -> i32 {
        $($path_to_types)*::_export_constructor_source_cabi::<<$ty as $($path_to_types)*::Guest>::Source>()
      }
      #[export_name = "quelle:extension/instance@0.1.0#[method]source.novel-info"]
      unsafe extern "C" fn export_method_source_novel_info(arg0: *mut u8,arg1: *mut u8,arg2: usize,) -> *mut u8 {
        $($path_to_types)*::_export_method_source_novel_info_cabi::<<$ty as $($path_to_types)*::Guest>::Source>(arg0, arg1, arg2)
      }
      #[export_name = "cabi_post_quelle:extension/instance@0.1.0#[method]source.novel-info"]
      unsafe extern "C" fn _post_return_method_source_novel_info(arg0: *mut u8,) {
        $($path_to_types)*::__post_return_method_source_novel_info::<<$ty as $($path_to_types)*::Guest>::Source>(arg0)
      }
      #[export_name = "quelle:extension/instance@0.1.0#[method]source.chapter-content"]
      unsafe extern "C" fn export_method_source_chapter_content(arg0: *mut u8,arg1: *mut u8,arg2: usize,) -> *mut u8 {
        $($path_to_types)*::_export_method_source_chapter_content_cabi::<<$ty as $($path_to_types)*::Guest>::Source>(arg0, arg1, arg2)
      }
      #[export_name = "cabi_post_quelle:extension/instance@0.1.0#[method]source.chapter-content"]
      unsafe extern "C" fn _post_return_method_source_chapter_content(arg0: *mut u8,) {
        $($path_to_types)*::__post_return_method_source_chapter_content::<<$ty as $($path_to_types)*::Guest>::Source>(arg0)
      }

      const _: () = {
        #[doc(hidden)]
        #[export_name = "quelle:extension/instance@0.1.0#[dtor]source"]
        #[allow(non_snake_case)]
        unsafe extern "C" fn dtor(rep: *mut u8) {
          $($path_to_types)*::Source::dtor::<
          <$ty as $($path_to_types)*::Guest>::Source
          >(rep)
        }
      };

    };);
  }
                #[doc(hidden)]
                pub(crate) use __export_quelle_extension_instance_0_1_0_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 76]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 76]);
            }
        }
    }
}
mod _rt {
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;

    use core::fmt;
    use core::marker;
    use core::sync::atomic::{AtomicU32, Ordering::Relaxed};

    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        // NB: This would ideally be `u32` but it is not. The fact that this has
        // interior mutability is not exposed in the API of this type except for the
        // `take_handle` method which is supposed to in theory be private.
        //
        // This represents, almost all the time, a valid handle value. When it's
        // invalid it's stored as `u32::MAX`.
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }

    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }

    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }

        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }

        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }

    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource")
                .field("handle", &self.handle)
                .finish()
        }
    }

    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    // If this handle was "taken" then don't do anything in the
                    // destructor.
                    u32::MAX => {}

                    // ... but otherwise do actually destroy it with the imported
                    // component model intrinsic as defined through `T`.
                    other => T::drop(other),
                }
            }
        }
    }
    pub use alloc_crate::alloc;
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            core::hint::unreachable_unchecked()
        }
    }
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub use alloc_crate::boxed::Box;

    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }

    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }

    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }

    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    extern crate alloc as alloc_crate;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_extension_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::quelle::extension::meta::__export_quelle_extension_meta_0_1_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::quelle::extension::meta);
  $($path_to_types_root)*::exports::quelle::extension::instance::__export_quelle_extension_instance_0_1_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::quelle::extension::instance);
  )
}
#[doc(inline)]
pub(crate) use __export_extension_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.24.0:extension:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 1763] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xe3\x0c\x01A\x02\x01\
A\x0d\x01B#\x01m\x07\x03get\x04post\x03put\x06delete\x05patch\x04head\x07options\
\x04\0\x06method\x03\0\0\x01p}\x01ks\x01r\x03\x04data\x02\x04name\x03\x0ccontent\
-type\x03\x04\0\x09data-part\x03\0\x04\x01q\x02\x04text\x01s\0\x04data\x01\x05\0\
\x04\0\x09form-part\x03\0\x06\x01o\x02s\x07\x01p\x08\x01q\x01\x04form\x01\x09\0\x04\
\0\x0crequest-body\x03\0\x0a\x01k\x02\x01k\x0b\x01r\x05\x06method\x01\x03urls\x06\
params\x0c\x04data\x0d\x07headers\x0c\x04\0\x07request\x03\0\x0e\x01o\x02ss\x01p\
\x10\x01k\x11\x01r\x03\x06status{\x04data\x0c\x07headers\x12\x04\0\x08response\x03\
\0\x13\x01m\x06\x0cbad-response\x10connection-error\x12connection-timeout\x0frec\
eive-timeout\x11request-cancelled\x0csend-timeout\x04\0\x13response-error-kind\x03\
\0\x15\x01k{\x01k\x14\x01r\x04\x06status\x17\x04kind\x16\x08response\x18\x07mess\
ages\x04\0\x0eresponse-error\x03\0\x19\x04\0\x06client\x03\x01\x01i\x1b\x01@\0\0\
\x1c\x04\0\x13[constructor]client\x01\x1d\x01h\x1b\x01j\x01\x14\x01\x1a\x01@\x02\
\x04self\x1e\x07request\x0f\0\x1f\x04\0\x16[method]client.request\x01\x20\x03\x01\
\x1aquelle:http/outgoing@0.1.0\x05\0\x01B\x09\x01m\x02\x03ltr\x03rtl\x04\0\x11re\
ading-direction\x03\0\0\x01m\x01\x0afanfiction\x04\0\x0bsource-attr\x03\0\x02\x01\
ps\x01p\x01\x01p\x03\x01r\x07\x02ids\x04names\x05langs\x04\x07versions\x09base-u\
rls\x04\x03rds\x05\x05attrs\x06\x04\0\x0bsource-meta\x03\0\x07\x03\x01\x18quelle\
:core/source@0.1.0\x05\x01\x01B\x17\x01m\x06\x07ongoing\x06hiatus\x09completed\x04\
stub\x07dropped\x07unknown\x04\0\x0cnovel-status\x03\0\0\x01ks\x01r\x03\x05title\
s\x05cover\x02\x03urls\x04\0\x0bbasic-novel\x03\0\x03\x01r\x04\x05titles\x05inde\
xz\x03urls\x0aupdated-at\x02\x04\0\x07chapter\x03\0\x05\x01p\x06\x01r\x03\x04nam\
es\x05indexz\x08chapters\x07\x04\0\x06volume\x03\0\x08\x01m\x02\x02dc\x03opf\x04\
\0\x09namespace\x03\0\x0a\x01o\x02ss\x01p\x0c\x01r\x04\x04names\x05values\x02ns\x0b\
\x06others\x0d\x04\0\x08metadata\x03\0\x0e\x01ps\x01p\x09\x01p\x0f\x01r\x09\x03u\
rls\x07authors\x10\x05titles\x05cover\x02\x0bdescription\x10\x07volumes\x11\x08m\
etadata\x12\x06status\x01\x05langs\x10\x04\0\x05novel\x03\0\x13\x01r\x01\x04data\
s\x04\0\x0fchapter-content\x03\0\x15\x03\x01\x17quelle:core/novel@0.1.0\x05\x02\x02\
\x03\0\x01\x0bsource-meta\x01B\x07\x02\x03\x02\x01\x03\x04\0\x0bsource-meta\x03\0\
\0\x01@\0\0\x01\x04\0\x0eextension-info\x01\x02\x01j\0\x01s\x01@\0\0\x03\x04\0\x05\
setup\x01\x04\x04\x01\x1bquelle:extension/meta@0.1.0\x05\x04\x02\x03\0\x02\x05no\
vel\x02\x03\0\x02\x0fchapter-content\x01B\x0f\x02\x03\x02\x01\x05\x04\0\x05novel\
\x03\0\0\x02\x03\x02\x01\x06\x04\0\x0fchapter-content\x03\0\x02\x04\0\x06source\x03\
\x01\x01i\x04\x01@\0\0\x05\x04\0\x13[constructor]source\x01\x06\x01h\x04\x01j\x01\
\x01\x01s\x01@\x02\x04self\x07\x03urls\0\x08\x04\0\x19[method]source.novel-info\x01\
\x09\x01j\x01\x03\x01s\x01@\x02\x04self\x07\x03urls\0\x0a\x04\0\x1e[method]sourc\
e.chapter-content\x01\x0b\x04\x01\x1fquelle:extension/instance@0.1.0\x05\x07\x04\
\x01\x20quelle:extension/extension@0.1.0\x04\0\x0b\x0f\x01\0\x09extension\x03\0\0\
\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.202.0\x10wit-bind\
gen-rust\x060.24.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
